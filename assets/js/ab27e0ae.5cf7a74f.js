"use strict";(self.webpackChunkcelestia_docs=self.webpackChunkcelestia_docs||[]).push([[9641],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return p}});var l=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,l,a=function(e,t){if(null==e)return{};var n,l,a={},i=Object.keys(e);for(l=0;l<i.length;l++)n=i[l],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(l=0;l<i.length;l++)n=i[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=l.createContext({}),c=function(e){var t=l.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=c(e.components);return l.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},k=l.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),k=c(n),p=a,b=k["".concat(s,".").concat(p)]||k[p]||d[p]||i;return n?l.createElement(b,r(r({ref:t},u),{},{components:n})):l.createElement(b,r({ref:t},u))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=k;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var c=2;c<i;c++)r[c]=n[c];return l.createElement.apply(null,r)}return l.createElement.apply(null,n)}k.displayName="MDXCreateElement"},5162:function(e,t,n){n.d(t,{Z:function(){return r}});var l=n(7294),a=n(4334),i="tabItem_Ymn6";function r(e){let{children:t,hidden:n,className:r}=e;return l.createElement("div",{role:"tabpanel",className:(0,a.Z)(i,r),hidden:n},t)}},5488:function(e,t,n){n.d(t,{Z:function(){return p}});var l=n(3117),a=n(7294),i=n(4334),r=n(2389),o=n(7392),s=n(7094),c=n(2466),u="tabList__CuJ",d="tabItem_LNqP";function k(e){var t;const{lazy:n,block:r,defaultValue:k,values:p,groupId:b,className:m}=e,g=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=p??g.map((e=>{let{props:{value:t,label:n,attributes:l}}=e;return{value:t,label:n,attributes:l}})),v=(0,o.l)(h,((e,t)=>e.value===t.value));if(v.length>0)throw new Error(`Docusaurus error: Duplicate values "${v.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===k?k:k??(null==(t=g.find((e=>e.props.default)))?void 0:t.props.value)??g[0].props.value;if(null!==f&&!h.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:w}=(0,s.U)(),[N,T]=(0,a.useState)(f),I=[],{blockElementScrollPositionUntilNextRender:Z}=(0,c.o5)();if(null!=b){const e=y[b];null!=e&&e!==N&&h.some((t=>t.value===e))&&T(e)}const C=e=>{const t=e.currentTarget,n=I.indexOf(t),l=h[n].value;l!==N&&(Z(t),T(l),null!=b&&w(b,String(l)))},O=e=>{var t;let n=null;switch(e.key){case"Enter":C(e);break;case"ArrowRight":{const t=I.indexOf(e.currentTarget)+1;n=I[t]??I[0];break}case"ArrowLeft":{const t=I.indexOf(e.currentTarget)-1;n=I[t]??I[I.length-1];break}}null==(t=n)||t.focus()};return a.createElement("div",{className:(0,i.Z)("tabs-container",u)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":r},m)},h.map((e=>{let{value:t,label:n,attributes:r}=e;return a.createElement("li",(0,l.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>I.push(e),onKeyDown:O,onClick:C},r,{className:(0,i.Z)("tabs__item",d,null==r?void 0:r.className,{"tabs__item--active":N===t})}),n??t)}))),n?(0,a.cloneElement)(g.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function p(e){const t=(0,r.Z)();return a.createElement(k,(0,l.Z)({key:String(t)},e))}},464:function(e,t){const n=Object.freeze({"app-latest-tag":"v0.12.0-rc7","app-latest-sha":"67c90ede03d2543ce9b02726dfe17cf5aad1f20a","core-latest-tag":"v1.14.0-tm-v0.34.23","core-latest-sha":"ab4ef71b202dd9d27c879a820fa06e127d4234fa","node-latest-tag":"v0.7.0-rc10","node-latest-sha":"61a66a56b36e5772e892448c43ad01753d576af7"});t.Z=n},8842:function(e,t){const n=Object.freeze({"app-latest-tag":"v0.12.0","app-latest-sha":"67c90ede03d2543ce9b02726dfe17cf5aad1f20a","core-latest-tag":"v1.14.0-tm-v0.34.23","core-latest-sha":"ab4ef71b202dd9d27c879a820fa06e127d4234fa","node-latest-tag":"v0.7.0","node-latest-sha":"7226f02794bdf11a91116d0d4cd88399f05149ad"});t.Z=n},578:function(e,t){const n=Object.freeze({golangNode:"1.19.1",golangApp:"1.19.1",golangCore:"1.19.1",golang:"1.19.1",arabicaChainId:"arabica-6"});t.Z=n},8549:function(e,t){const n=Object.freeze({"app-latest-tag":"v0.11.1","app-latest-sha":"a1eb594d43137ded5f9c1062168d26139a251e16","core-latest-tag":"v1.14.0-tm-v0.34.23","core-latest-sha":"ab4ef71b202dd9d27c879a820fa06e127d4234fa","node-latest-tag":"v0.6.4","node-latest-sha":"747c9e593542dfb32a933c731a9cd74b1fab897f"});t.Z=n},7245:function(e,t,n){n.r(t),n.d(t,{assets:function(){return b},contentTitle:function(){return k},default:function(){return h},frontMatter:function(){return d},metadata:function(){return p},toc:function(){return m}});var l=n(3117),a=(n(7294),n(3905)),i=n(578),r=n(8549),o=n(464),s=n(8842),c=n(5488),u=n(5162);const d={sidebar_label:"Installing celestia-node"},k="celestia-node",p={unversionedId:"nodes/celestia-node",id:"nodes/celestia-node",title:"celestia-node",description:"This tutorial goes over building and installing celestia-node. This",source:"@site/docs/nodes/celestia-node.mdx",sourceDirName:"nodes",slug:"/nodes/celestia-node",permalink:"/nodes/celestia-node",draft:!1,editUrl:"https://github.com/celestiaorg/docs/tree/main/docs/nodes/celestia-node.mdx",tags:[],version:"current",frontMatter:{sidebar_label:"Installing celestia-node"},sidebar:"nodes",previous:{title:"Setting up environment",permalink:"/nodes/environment"},next:{title:"Docker images",permalink:"/nodes/docker-images"}},b={},m=[{value:"Install celestia-node",id:"install-celestia-node",level:2},{value:"Network selection",id:"network-selection",level:2},{value:"Errors",id:"errors",level:3},{value:"Errors",id:"errors-1",level:3},{value:"Errors",id:"errors-2",level:3}],g={toc:m};function h(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,l.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"celestia-node"},"celestia-node"),(0,a.kt)("p",null,"This tutorial goes over building and installing ",(0,a.kt)("inlineCode",{parentName:"p"},"celestia-node"),". This\ntutorial assumes you completed the steps in setting up your development\nenvironment ",(0,a.kt)("a",{parentName:"p",href:"/nodes/environment"},"here"),"."),(0,a.kt)("h2",{id:"install-celestia-node"},"Install celestia-node"),(0,a.kt)(c.Z,{groupId:"network",mdxType:"Tabs"},(0,a.kt)(u.Z,{value:"blockspacerace",label:"blockspacerace",mdxType:"TabItem"},(0,a.kt)(c.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,a.kt)(u.Z,{value:"amd",label:"Ubuntu (AMD)",mdxType:"TabItem"},(0,a.kt)("p",null,"Installing ",(0,a.kt)("inlineCode",{parentName:"p"},"celestia-node")," for the blockspacerace testnet means installing a specific version\nto be compatible with the network."),(0,a.kt)("p",null,"Install the ",(0,a.kt)("inlineCode",{parentName:"p"},"celestia-node")," binary by running the following commands:"),(0,a.kt)("pre",null,(0,a.kt)("code",null,"cd $HOME ",(0,a.kt)("br",null),"rm -rf celestia-node ",(0,a.kt)("br",null),"git clone https://github.com/celestiaorg/celestia-node.git ",(0,a.kt)("br",null),"cd celestia-node/ ",(0,a.kt)("br",null),"git checkout tags/",s.Z["node-latest-tag"]," ",(0,a.kt)("br",null),"make build ",(0,a.kt)("br",null),"make install ",(0,a.kt)("br",null),"make cel-key ",(0,a.kt)("br",null))),(0,a.kt)("p",null,"Verify that the binary is working and check the version with the ",(0,a.kt)("inlineCode",{parentName:"p"},"celestia\nversion")," command:"),(0,a.kt)("pre",null,(0,a.kt)("code",null,"$ celestia version ",(0,a.kt)("br",null),"Semantic version: ",s.Z["node-latest-tag"]," ",(0,a.kt)("br",null),"Commit: ",s.Z["node-latest-sha"]," ",(0,a.kt)("br",null),"Build Date: Thu Dec 15 10:19:22 PM UTC 2022 ",(0,a.kt)("br",null),"System version: amd64/linux ",(0,a.kt)("br",null),"Golang version: go",i.Z.golangNode," ",(0,a.kt)("br",null)))),(0,a.kt)(u.Z,{value:"arm",label:"Ubuntu (ARM)",mdxType:"TabItem"},(0,a.kt)("p",null,"Installing ",(0,a.kt)("inlineCode",{parentName:"p"},"celestia-node")," for the blockspacerace testnet means installing a specific version\nto be compatible with the network."),(0,a.kt)("p",null,"Install the ",(0,a.kt)("inlineCode",{parentName:"p"},"celestia-node")," binary by running the following commands:"),(0,a.kt)("pre",null,(0,a.kt)("code",null,"cd $HOME ",(0,a.kt)("br",null),"rm -rf celestia-node ",(0,a.kt)("br",null),"git clone https://github.com/celestiaorg/celestia-node.git ",(0,a.kt)("br",null),"cd celestia-node/ ",(0,a.kt)("br",null),"git checkout tags/",s.Z["node-latest-tag"]," ",(0,a.kt)("br",null),"make build ",(0,a.kt)("br",null),"make install ",(0,a.kt)("br",null),"make cel-key ",(0,a.kt)("br",null))),(0,a.kt)("p",null,"Verify that the binary is working and check the version with the ",(0,a.kt)("inlineCode",{parentName:"p"},"celestia\nversion")," command:"),(0,a.kt)("pre",null,(0,a.kt)("code",null,"$ celestia version ",(0,a.kt)("br",null),"Semantic version: ",s.Z["node-latest-tag"]," ",(0,a.kt)("br",null),"Commit: ",s.Z["node-latest-sha"]," ",(0,a.kt)("br",null),"Build Date: Thu Dec 15 10:19:22 PM UTC 2022 ",(0,a.kt)("br",null),"System version: arm64/linux ",(0,a.kt)("br",null),"Golang version: go",i.Z.golangNode," ",(0,a.kt)("br",null)))),(0,a.kt)(u.Z,{value:"apple",label:"Mac (Apple)",mdxType:"TabItem"},(0,a.kt)("p",null,"Installing ",(0,a.kt)("inlineCode",{parentName:"p"},"celestia-node")," for the blockspacerace testnet means installing a specific version\nto be compatible with the network."),(0,a.kt)("p",null,"Install the ",(0,a.kt)("inlineCode",{parentName:"p"},"celestia-node")," binary by running the following commands:"),(0,a.kt)("pre",null,(0,a.kt)("code",null,"cd $HOME ",(0,a.kt)("br",null),"rm -rf celestia-node ",(0,a.kt)("br",null),"git clone https://github.com/celestiaorg/celestia-node.git ",(0,a.kt)("br",null),"cd celestia-node/ ",(0,a.kt)("br",null),"git checkout tags/",s.Z["node-latest-tag"]," ",(0,a.kt)("br",null),"make build ",(0,a.kt)("br",null),"make go-install ",(0,a.kt)("br",null),"make cel-key ",(0,a.kt)("br",null))),(0,a.kt)("p",null,"Verify that the binary is working and check the version with the ",(0,a.kt)("inlineCode",{parentName:"p"},"celestia\nversion")," command:"),(0,a.kt)("pre",null,(0,a.kt)("code",null,"$ celestia version ",(0,a.kt)("br",null),"Semantic version: ",s.Z["node-latest-tag"]," ",(0,a.kt)("br",null),"Commit: ",s.Z["node-latest-sha"]," ",(0,a.kt)("br",null),"Build Date: Thu Dec 15 10:19:22 PM UTC 2022 ",(0,a.kt)("br",null),"System version: arm64/darwin ",(0,a.kt)("br",null),"Golang version: go",i.Z.golangNode," ",(0,a.kt)("br",null)))),(0,a.kt)(u.Z,{value:"mac",label:"Mac (Intel)",mdxType:"TabItem"},(0,a.kt)("p",null,"Installing ",(0,a.kt)("inlineCode",{parentName:"p"},"celestia-node")," for the blockspacerace testnet means installing a specific version\nto be compatible with the network."),(0,a.kt)("p",null,"Install the ",(0,a.kt)("inlineCode",{parentName:"p"},"celestia-node")," binary by running the following commands:"),(0,a.kt)("pre",null,(0,a.kt)("code",null,"cd $HOME ",(0,a.kt)("br",null),"rm -rf celestia-node ",(0,a.kt)("br",null),"git clone https://github.com/celestiaorg/celestia-node.git ",(0,a.kt)("br",null),"cd celestia-node/ ",(0,a.kt)("br",null),"git checkout tags/",s.Z["node-latest-tag"]," ",(0,a.kt)("br",null),"make build ",(0,a.kt)("br",null),"make go-install ",(0,a.kt)("br",null),"make cel-key ",(0,a.kt)("br",null))),(0,a.kt)("p",null,"Verify that the binary is working and check the version with the ",(0,a.kt)("inlineCode",{parentName:"p"},"celestia\nversion")," command:"),(0,a.kt)("pre",null,(0,a.kt)("code",null,"$ celestia version ",(0,a.kt)("br",null),"Semantic version: ",s.Z["node-latest-tag"]," ",(0,a.kt)("br",null),"Commit: ",s.Z["node-latest-sha"]," ",(0,a.kt)("br",null),"Build Date: Thu Dec 15 10:19:22 PM UTC 2022 ",(0,a.kt)("br",null),"System version: amd64/darwin ",(0,a.kt)("br",null),"Golang version: go",i.Z.golangNode," ",(0,a.kt)("br",null)))))),(0,a.kt)(u.Z,{value:"mocha",label:"Mocha",mdxType:"TabItem"},(0,a.kt)(c.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,a.kt)(u.Z,{value:"amd",label:"Ubuntu (AMD)",mdxType:"TabItem"},(0,a.kt)("p",null,"Installing ",(0,a.kt)("inlineCode",{parentName:"p"},"celestia-node")," for Mocha Testnet means installing a specific version\nto be compatible with the network."),(0,a.kt)("p",null,"Install the ",(0,a.kt)("inlineCode",{parentName:"p"},"celestia-node")," binary by running the following commands:"),(0,a.kt)("pre",null,(0,a.kt)("code",null,"cd $HOME ",(0,a.kt)("br",null),"rm -rf celestia-node ",(0,a.kt)("br",null),"git clone https://github.com/celestiaorg/celestia-node.git ",(0,a.kt)("br",null),"cd celestia-node/ ",(0,a.kt)("br",null),"git checkout tags/",r.Z["node-latest-tag"]," ",(0,a.kt)("br",null),"make build ",(0,a.kt)("br",null),"make install ",(0,a.kt)("br",null),"make cel-key ",(0,a.kt)("br",null))),(0,a.kt)("p",null,"Verify that the binary is working and check the version with the ",(0,a.kt)("inlineCode",{parentName:"p"},"celestia\nversion")," command:"),(0,a.kt)("pre",null,(0,a.kt)("code",null,"$ celestia version ",(0,a.kt)("br",null),"Semantic version: ",r.Z["node-latest-tag"]," ",(0,a.kt)("br",null),"Commit: ",r.Z["node-latest-sha"]," ",(0,a.kt)("br",null),"Build Date: Thu Dec 15 10:19:22 PM UTC 2022 ",(0,a.kt)("br",null),"System version: amd64/linux ",(0,a.kt)("br",null),"Golang version: go",i.Z.golangNode," ",(0,a.kt)("br",null)))),(0,a.kt)(u.Z,{value:"arm",label:"Ubuntu (ARM)",mdxType:"TabItem"},(0,a.kt)("p",null,"Installing ",(0,a.kt)("inlineCode",{parentName:"p"},"celestia-node")," for Mocha Testnet means installing a specific version\nto be compatible with the network."),(0,a.kt)("p",null,"Install the ",(0,a.kt)("inlineCode",{parentName:"p"},"celestia-node")," binary by running the following commands:"),(0,a.kt)("pre",null,(0,a.kt)("code",null,"cd $HOME ",(0,a.kt)("br",null),"rm -rf celestia-node ",(0,a.kt)("br",null),"git clone https://github.com/celestiaorg/celestia-node.git ",(0,a.kt)("br",null),"cd celestia-node/ ",(0,a.kt)("br",null),"git checkout tags/",r.Z["node-latest-tag"]," ",(0,a.kt)("br",null),"make build ",(0,a.kt)("br",null),"make install ",(0,a.kt)("br",null),"make cel-key ",(0,a.kt)("br",null))),(0,a.kt)("p",null,"Verify that the binary is working and check the version with the ",(0,a.kt)("inlineCode",{parentName:"p"},"celestia\nversion")," command:"),(0,a.kt)("pre",null,(0,a.kt)("code",null,"$ celestia version ",(0,a.kt)("br",null),"Semantic version: ",r.Z["node-latest-tag"]," ",(0,a.kt)("br",null),"Commit: ",r.Z["node-latest-sha"]," ",(0,a.kt)("br",null),"Build Date: Thu Dec 15 10:19:22 PM UTC 2022 ",(0,a.kt)("br",null),"System version: arm64/linux ",(0,a.kt)("br",null),"Golang version: go",i.Z.golangNode," ",(0,a.kt)("br",null)))),(0,a.kt)(u.Z,{value:"apple",label:"Mac (Apple)",mdxType:"TabItem"},(0,a.kt)("p",null,"Installing ",(0,a.kt)("inlineCode",{parentName:"p"},"celestia-node")," for Mocha Testnet means installing a specific version\nto be compatible with the network."),(0,a.kt)("p",null,"Install the ",(0,a.kt)("inlineCode",{parentName:"p"},"celestia-node")," binary by running the following commands:"),(0,a.kt)("pre",null,(0,a.kt)("code",null,"cd $HOME ",(0,a.kt)("br",null),"rm -rf celestia-node ",(0,a.kt)("br",null),"git clone https://github.com/celestiaorg/celestia-node.git ",(0,a.kt)("br",null),"cd celestia-node/ ",(0,a.kt)("br",null),"git checkout tags/",r.Z["node-latest-tag"]," ",(0,a.kt)("br",null),"make build ",(0,a.kt)("br",null),"make go-install ",(0,a.kt)("br",null),"make cel-key ",(0,a.kt)("br",null))),(0,a.kt)("p",null,"Verify that the binary is working and check the version with the ",(0,a.kt)("inlineCode",{parentName:"p"},"celestia\nversion")," command:"),(0,a.kt)("pre",null,(0,a.kt)("code",null,"$ celestia version ",(0,a.kt)("br",null),"Semantic version: ",r.Z["node-latest-tag"]," ",(0,a.kt)("br",null),"Commit: ",r.Z["node-latest-sha"]," ",(0,a.kt)("br",null),"Build Date: Thu Dec 15 10:19:22 PM UTC 2022 ",(0,a.kt)("br",null),"System version: arm64/darwin ",(0,a.kt)("br",null),"Golang version: go",i.Z.golangNode," ",(0,a.kt)("br",null)))),(0,a.kt)(u.Z,{value:"mac",label:"Mac (Intel)",mdxType:"TabItem"},(0,a.kt)("p",null,"Installing ",(0,a.kt)("inlineCode",{parentName:"p"},"celestia-node")," for Mocha Testnet means installing a specific version\nto be compatible with the network."),(0,a.kt)("p",null,"Install the ",(0,a.kt)("inlineCode",{parentName:"p"},"celestia-node")," binary by running the following commands:"),(0,a.kt)("pre",null,(0,a.kt)("code",null,"cd $HOME ",(0,a.kt)("br",null),"rm -rf celestia-node ",(0,a.kt)("br",null),"git clone https://github.com/celestiaorg/celestia-node.git ",(0,a.kt)("br",null),"cd celestia-node/ ",(0,a.kt)("br",null),"git checkout tags/",r.Z["node-latest-tag"]," ",(0,a.kt)("br",null),"make build ",(0,a.kt)("br",null),"make go-install ",(0,a.kt)("br",null),"make cel-key ",(0,a.kt)("br",null))),(0,a.kt)("p",null,"Verify that the binary is working and check the version with the ",(0,a.kt)("inlineCode",{parentName:"p"},"celestia\nversion")," command:"),(0,a.kt)("pre",null,(0,a.kt)("code",null,"$ celestia version ",(0,a.kt)("br",null),"Semantic version: ",r.Z["node-latest-tag"]," ",(0,a.kt)("br",null),"Commit: ",r.Z["node-latest-sha"]," ",(0,a.kt)("br",null),"Build Date: Thu Dec 15 10:19:22 PM UTC 2022 ",(0,a.kt)("br",null),"System version: amd64/darwin ",(0,a.kt)("br",null),"Golang version: go",i.Z.golangNode," ",(0,a.kt)("br",null)))))),(0,a.kt)(u.Z,{value:"arabica",label:"Arabica \ud83c\udfd7\ufe0f",mdxType:"TabItem"},(0,a.kt)(c.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,a.kt)(u.Z,{value:"amd",label:"Ubuntu (AMD)",mdxType:"TabItem"},(0,a.kt)("p",null,"Installing ",(0,a.kt)("inlineCode",{parentName:"p"},"celestia-node")," for Arabica Devnet means installing a specific version\nto be compatible with the network."),(0,a.kt)("p",null,"Install the ",(0,a.kt)("inlineCode",{parentName:"p"},"celestia-node")," binary by running the following commands:"),(0,a.kt)("pre",null,(0,a.kt)("code",null,"cd $HOME ",(0,a.kt)("br",null),"rm -rf celestia-node ",(0,a.kt)("br",null),"git clone https://github.com/celestiaorg/celestia-node.git ",(0,a.kt)("br",null),"cd celestia-node/ ",(0,a.kt)("br",null),"git checkout tags/",o.Z["node-latest-tag"]," ",(0,a.kt)("br",null),"make build ",(0,a.kt)("br",null),"make install ",(0,a.kt)("br",null),"make cel-key ",(0,a.kt)("br",null))),(0,a.kt)("p",null,"Verify that the binary is working and check the version with the ",(0,a.kt)("inlineCode",{parentName:"p"},"celestia\nversion")," command:"),(0,a.kt)("pre",null,(0,a.kt)("code",null,"$ celestia version ",(0,a.kt)("br",null),"Semantic version: ",o.Z["node-latest-tag"]," ",(0,a.kt)("br",null),"Commit: ",o.Z["node-latest-sha"]," ",(0,a.kt)("br",null),"Build Date: Thu Dec 15 10:19:22 PM UTC 2022 ",(0,a.kt)("br",null),"System version: amd64/linux ",(0,a.kt)("br",null),"Golang version: go",i.Z.golangNode," ",(0,a.kt)("br",null)))),(0,a.kt)(u.Z,{value:"arm",label:"Ubuntu (ARM)",mdxType:"TabItem"},(0,a.kt)("p",null,"Installing ",(0,a.kt)("inlineCode",{parentName:"p"},"celestia-node")," for Arabica Devnet means installing a specific version\nto be compatible with the network."),(0,a.kt)("p",null,"Install the ",(0,a.kt)("inlineCode",{parentName:"p"},"celestia-node")," binary by running the following commands:"),(0,a.kt)("pre",null,(0,a.kt)("code",null,"cd $HOME ",(0,a.kt)("br",null),"rm -rf celestia-node ",(0,a.kt)("br",null),"git clone https://github.com/celestiaorg/celestia-node.git ",(0,a.kt)("br",null),"cd celestia-node/ ",(0,a.kt)("br",null),"git checkout tags/",o.Z["node-latest-tag"]," ",(0,a.kt)("br",null),"make build ",(0,a.kt)("br",null),"make install ",(0,a.kt)("br",null),"make cel-key ",(0,a.kt)("br",null))),(0,a.kt)("p",null,"Verify that the binary is working and check the version with the ",(0,a.kt)("inlineCode",{parentName:"p"},"celestia\nversion")," command:"),(0,a.kt)("pre",null,(0,a.kt)("code",null,"$ celestia version ",(0,a.kt)("br",null),"Semantic version: ",o.Z["node-latest-tag"]," ",(0,a.kt)("br",null),"Commit: ",o.Z["node-latest-sha"]," ",(0,a.kt)("br",null),"Build Date: Thu Dec 15 10:19:22 PM UTC 2022 ",(0,a.kt)("br",null),"System version: arm64/linux ",(0,a.kt)("br",null),"Golang version: go",i.Z.golangNode," ",(0,a.kt)("br",null)))),(0,a.kt)(u.Z,{value:"apple",label:"Mac (Apple)",mdxType:"TabItem"},(0,a.kt)("p",null,"Installing ",(0,a.kt)("inlineCode",{parentName:"p"},"celestia-node")," for Arabica Devnet means installing a specific version\nto be compatible with the network."),(0,a.kt)("p",null,"Install the ",(0,a.kt)("inlineCode",{parentName:"p"},"celestia-node")," binary by running the following commands:"),(0,a.kt)("pre",null,(0,a.kt)("code",null,"cd $HOME ",(0,a.kt)("br",null),"rm -rf celestia-node ",(0,a.kt)("br",null),"git clone https://github.com/celestiaorg/celestia-node.git ",(0,a.kt)("br",null),"cd celestia-node/ ",(0,a.kt)("br",null),"git checkout tags/",o.Z["node-latest-tag"]," ",(0,a.kt)("br",null),"make build ",(0,a.kt)("br",null),"make go-install ",(0,a.kt)("br",null),"make cel-key ",(0,a.kt)("br",null))),(0,a.kt)("p",null,"Verify that the binary is working and check the version with the ",(0,a.kt)("inlineCode",{parentName:"p"},"celestia\nversion")," command:"),(0,a.kt)("pre",null,(0,a.kt)("code",null,"$ celestia version ",(0,a.kt)("br",null),"Semantic version: ",o.Z["node-latest-tag"]," ",(0,a.kt)("br",null),"Commit: ",o.Z["node-latest-sha"]," ",(0,a.kt)("br",null),"Build Date: Thu Dec 15 10:19:22 PM UTC 2022 ",(0,a.kt)("br",null),"System version: arm64/darwin ",(0,a.kt)("br",null),"Golang version: go",i.Z.golangNode," ",(0,a.kt)("br",null)))),(0,a.kt)(u.Z,{value:"mac",label:"Mac (Intel)",mdxType:"TabItem"},(0,a.kt)("p",null,"Installing ",(0,a.kt)("inlineCode",{parentName:"p"},"celestia-node")," for Arabica Devnet means installing a specific version\nto be compatible with the network."),(0,a.kt)("p",null,"Install the ",(0,a.kt)("inlineCode",{parentName:"p"},"celestia-node")," binary by running the following commands:"),(0,a.kt)("pre",null,(0,a.kt)("code",null,"cd $HOME ",(0,a.kt)("br",null),"rm -rf celestia-node ",(0,a.kt)("br",null),"git clone https://github.com/celestiaorg/celestia-node.git ",(0,a.kt)("br",null),"cd celestia-node/ ",(0,a.kt)("br",null),"git checkout tags/",o.Z["node-latest-tag"]," ",(0,a.kt)("br",null),"make build ",(0,a.kt)("br",null),"make go-install ",(0,a.kt)("br",null),"make cel-key ",(0,a.kt)("br",null))),(0,a.kt)("p",null,"Verify that the binary is working and check the version with the ",(0,a.kt)("inlineCode",{parentName:"p"},"celestia\nversion")," command:"),(0,a.kt)("pre",null,(0,a.kt)("code",null,"$ celestia version ",(0,a.kt)("br",null),"Semantic version: ",o.Z["node-latest-tag"]," ",(0,a.kt)("br",null),"Commit: ",o.Z["node-latest-sha"]," ",(0,a.kt)("br",null),"Build Date: Thu Dec 15 10:19:22 PM UTC 2022 ",(0,a.kt)("br",null),"System version: amd64/darwin ",(0,a.kt)("br",null),"Golang version: go",i.Z.golangNode," ",(0,a.kt)("br",null))))))),(0,a.kt)("h2",{id:"network-selection"},"Network selection"),(0,a.kt)("p",null,"Note: If you do not select a network, the default network will be 'Mocha'."),(0,a.kt)(c.Z,{groupId:"network",mdxType:"Tabs"},(0,a.kt)(u.Z,{value:"blockspacerace",label:"blockspacerace",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light init --p2p.network blockspacerace \ncelestia light start --p2p.network blockspacerace --core.ip <address> --gateway --gateway.addr <ip-address> --gateway.port <port>\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"NOTE: It is advised before switching networks to reinitialize\nyour node via ",(0,a.kt)("inlineCode",{parentName:"p"},"init")," command. This is due to an old config being present.\nRe-initialisation will reset the config.")),(0,a.kt)("h3",{id:"errors"},"Errors"),(0,a.kt)("p",null,"If you an encounter an error, it is likely that an old config file is present:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"Error: nodebuilder/share: interval must be positive; nodebuilder/core: invalid IP addr given:\n\n# or\n\nError: nodebuilder/share: interval must be positive\n")),(0,a.kt)("p",null,"You can re-initialize your node with the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"rm -rf ~./<path-to-node-store> && celestia light init --p2p.network <network-name>\n")),(0,a.kt)("p",null,"Here's an example for blockspacerace:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"rm -rf ~./celestia-light-blockspacerace && celestia light init --p2p.network blockspacerace\n")),(0,a.kt)("p",null,"Your output will look similar to below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},'2022-11-01T22:23:19.581+0100    INFO    node    nodebuilder/init.go:20  Initializing Light Node Store over \'/Users/joshstein/.celestia-light\'\n2022-11-01T22:23:19.582+0100    INFO    node    nodebuilder/init.go:51  Saving config   {"path": "/Users/joshstein/.celestia-light/config.toml"}\n2022-11-01T22:23:19.582+0100    INFO    node    nodebuilder/init.go:52  Node Store initialized\n')),(0,a.kt)("p",null,"Then start your node:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light start --p2p.network blockspacerace --core.ip <address> --gateway --gateway.addr <ip-address> --gateway.port <port>\n"))),(0,a.kt)(u.Z,{value:"mocha",label:"Mocha",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light init --p2p.network mocha \ncelestia light start --p2p.network mocha --core.ip <address> --gateway --gateway.addr <ip-address> --gateway.port <port>\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"NOTE: It is advised before switching networks to reinitialize\nyour node via ",(0,a.kt)("inlineCode",{parentName:"p"},"init")," command. This is due to an old config being present.\nRe-initialisation will reset the config.")),(0,a.kt)("h3",{id:"errors-1"},"Errors"),(0,a.kt)("p",null,"If you an encounter an error, it is likely that an old config file is present:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"Error: nodebuilder/share: interval must be positive; nodebuilder/core: invalid IP addr given:\n\n# or\n\nError: nodebuilder/share: interval must be positive\n")),(0,a.kt)("p",null,"You can re-initialize your node with the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"rm -rf ~./<path-to-node-store> && celestia light init --p2p.network <network-name>\n")),(0,a.kt)("p",null,"Here's an example for Mocha:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"rm -rf ~./celestia-light-mocha && celestia light init --p2p.network mocha\n")),(0,a.kt)("p",null,"Your output will look similar to below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},'2022-11-01T22:23:19.581+0100    INFO    node    nodebuilder/init.go:20  Initializing Light Node Store over \'/Users/joshstein/.celestia-light\'\n2022-11-01T22:23:19.582+0100    INFO    node    nodebuilder/init.go:51  Saving config   {"path": "/Users/joshstein/.celestia-light/config.toml"}\n2022-11-01T22:23:19.582+0100    INFO    node    nodebuilder/init.go:52  Node Store initialized\n')),(0,a.kt)("p",null,"Then start your node:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light start --p2p.network mocha --core.ip <address> --gateway --gateway.addr <ip-address> --gateway.port <port>\n"))),(0,a.kt)(u.Z,{value:"arabica",label:"Arabica \ud83c\udfd7\ufe0f",mdxType:"TabItem"},(0,a.kt)("p",null,"You can perform network selection in ",(0,a.kt)("inlineCode",{parentName:"p"},"celestia-node")," between Arabica and\nMocha. However, you should note that networks work best on the ",(0,a.kt)("inlineCode",{parentName:"p"},"celestia-node"),"\nversions mentioned above."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light init --p2p.network arabica\ncelestia light start --p2p.network arabica --core.ip <address> --gateway --gateway.addr <ip-address> --gateway.port <port>\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"NOTE: It is advised before switching networks to reinitialize\nyour node via ",(0,a.kt)("inlineCode",{parentName:"p"},"init")," command. This is due to an old config being present.\nRe-initialisation will reset the config.")),(0,a.kt)("h3",{id:"errors-2"},"Errors"),(0,a.kt)("p",null,"If you an encounter an error, it is likely that an old config file is present:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"Error: nodebuilder/share: interval must be positive; nodebuilder/core: invalid IP addr given:\n\n# or\n\nError: nodebuilder/share: interval must be positive\n")),(0,a.kt)("p",null,"You can re-initialize your node with the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"rm -rf ~./<path-to-node-store> && celestia light init --p2p.network <network-name>\n")),(0,a.kt)("p",null,"Here's an example for Arabica:"),(0,a.kt)("pre",null,(0,a.kt)("code",null,"rm -rf ~./celestia-light-",i.Z.arabicaChainId," && celestia light init --p2p.network arabica")),(0,a.kt)("p",null,"Your output will look similar to below:"),(0,a.kt)("pre",null,(0,a.kt)("code",null,"2022-11-01T22:23:19.581+0100 INFO node nodebuilder/init.go:20 Initializing Light Node Store over '/Users/joshstein/.celestia-light-",i.Z.arabicaChainId,"' ",(0,a.kt)("br",null),"2022-11-01T22:23:19.582+0100 INFO node nodebuilder/init.go:51 Saving config ",`{"path": "/Users/joshstein/.celestia-light-${i.Z.arabicaChainId}/config.toml"}`,"` ",(0,a.kt)("br",null),"2022-11-01T22:23:19.582+0100 INFO node nodebuilder/init.go:52 Node Store initialized")),(0,a.kt)("p",null,"Then start your node:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light start --p2p.network arabica --core.ip <address> --gateway --gateway.addr <ip-address> --gateway.port <port>\n")))))}h.isMDXComponent=!0}}]);