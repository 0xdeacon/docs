"use strict";(self.webpackChunkcelestia_docs=self.webpackChunkcelestia_docs||[]).push([[544],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),h=o,m=u["".concat(s,".").concat(h)]||u[h]||d[h]||r;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},188:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return d}});var a=n(7462),o=n(3366),r=(n(7294),n(3905)),i=["components"],l={},s="DevNet-2",c={unversionedId:"nodes/devnet-2",id:"nodes/devnet-2",title:"DevNet-2",description:"This guide contains the relevant sections for how to connect to Devnet,",source:"@site/docs/nodes/devnet-2.md",sourceDirName:"nodes",slug:"/nodes/devnet-2",permalink:"/nodes/devnet-2",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/nodes/devnet-2.md",tags:[],version:"current",frontMatter:{},sidebar:"nodes",previous:{title:"Participate",permalink:"/category/participate"},next:{title:"Resources",permalink:"/category/resources"}},p={},d=[{value:"Setup P2P Network",id:"setup-p2p-network",level:2},{value:"Quick-Sync With Snapshot",id:"quick-sync-with-snapshot",level:2},{value:"Delegate to a Validator",id:"delegate-to-a-validator",level:2},{value:"Configure The Bridge Node",id:"configure-the-bridge-node",level:2},{value:"Connect Validator",id:"connect-validator",level:2}],u={toc:d};function h(e){var t=e.components,n=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"devnet-2"},"DevNet-2"),(0,r.kt)("p",null,"This guide contains the relevant sections for how to connect to Devnet,\ndepending on the type of node you are running. Devnet-2 is a milestone\nin Celestia, allowing everyone to test out core functionalities on the\nnetwork. You can read more on the announcement ",(0,r.kt)("a",{parentName:"p",href:"https://blog.celestia.org/celestia-launches-devnet/"},"here")),(0,r.kt)("p",null,"Your best approach to participating is to first determine which node\nyou would like to run. Each node guides will link to the relevant network\nin order to show you how to connect to them."),(0,r.kt)("p",null,"You have a list of options on the type of nodes you can run in order to\nparticipate in Devnet-2:"),(0,r.kt)("p",null,"Consensus:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/nodes/validator-node"},"Validator Node"))),(0,r.kt)("p",null,"Data Availability:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/nodes/bridge-node"},"Bridge Node")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/nodes/full-node"},"Full Node")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/nodes/light-node"},"Light Node"))),(0,r.kt)("p",null,"Select the type of node you would like to run and follow the instructions\non each respective page. Whenever you are asked to select the type of network\nyou want to connect to in those guides, select ",(0,r.kt)("inlineCode",{parentName:"p"},"Devnet-2")," in order to refer\nto the correct instructions on this page on how to connect to Devnet-2."),(0,r.kt)("h2",{id:"setup-p2p-network"},"Setup P2P Network"),(0,r.kt)("p",null,"Now we will setup the P2P Networks by cloning the networks repository:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"cd $HOME\nrm -rf networks\ngit clone https://github.com/celestiaorg/networks.git\n")),(0,r.kt)("p",null,'To initialize the network pick a "node-name" that describes your\nnode. The --chain-id parameter we are using here is ',(0,r.kt)("inlineCode",{parentName:"p"},"devnet-2"),". Keep in\nmind that this might change if a new testnet is deployed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'celestia-appd init "node-name" --chain-id devnet-2\n')),(0,r.kt)("p",null,"Copy the ",(0,r.kt)("inlineCode",{parentName:"p"},"genesis.json")," file. For devnet-2 we are using:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"cp $HOME/networks/devnet-2/genesis.json $HOME/.celestia-app/config\n")),(0,r.kt)("p",null,"Set seeds and peers:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'SEEDS="74c0c793db07edd9b9ec17b076cea1a02dca511f@46.101.28.34:26656"\nPEERS="34d4bfec8998a8fac6393a14c5ae151cf6a5762f@194.163.191.41:26656"\nsed -i.bak -e "s/^seeds *=.*/seeds = \\"$SEEDS\\"/; s/^persistent_peers \\\n    *=.*/persistent_peers = \\"$PEERS\\"/" $HOME/.celestia-app/config/config.toml\n')),(0,r.kt)("p",null,"You can return back to where you left off in the Bridge Node guide ",(0,r.kt)("a",{parentName:"p",href:"/nodes/validator-node#configure-pruning"},"here")),(0,r.kt)("h2",{id:"quick-sync-with-snapshot"},"Quick-Sync With Snapshot"),(0,r.kt)("p",null,"Run the following command to quick-sync from a snapshot for\n",(0,r.kt)("inlineCode",{parentName:"p"},"devnet-2")," (Note: this is a 100 GB download):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'cd $HOME\nrm -rf ~/.celestia-app/data\nmkdir -p ~/.celestia-app/data\nSNAP_NAME=$(curl -s https://snaps.qubelabs.io/celestia/ | \\\n    egrep -o ">devnet-2.*tar" | tr -d ">")\nwget -O - https://snaps.qubelabs.io/celestia/${SNAP_NAME} | tar xf - \\\n    -C ~/.celestia-app/data/\n')),(0,r.kt)("p",null,"You can return back to where you left off in the Bridge Node guide ",(0,r.kt)("a",{parentName:"p",href:"/nodes/validator-node#start-the-celestia-app-with-systemd"},"here")),(0,r.kt)("h2",{id:"delegate-to-a-validator"},"Delegate to a Validator"),(0,r.kt)("p",null,"To delegate tokens to the the ",(0,r.kt)("inlineCode",{parentName:"p"},"celesvaloper")," validator, as an example you can run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"celestia-appd tx staking delegate \\\n    celesvaloper1q3v5cugc8cdpud87u4zwy0a74uxkk6u43cv6hd 1000000celes \\\n    --from=$VALIDATOR_WALLET --chain-id=devnet-2\n")),(0,r.kt)("p",null,"If successful, you should see a similar output as:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},'code: 0\ncodespace: ""\ndata: ""\ngas_used: "0"\ngas_wanted: "0"\nheight: "0"\ninfo: ""\nlogs: []\nraw_log: \'[]\'\ntimestamp: ""\ntx: null\ntxhash: <tx-hash>\n')),(0,r.kt)("p",null,"You can check if the TX hash went through using the block explorer by\ninputting the ",(0,r.kt)("inlineCode",{parentName:"p"},"txhash")," ID that was returned."),(0,r.kt)("p",null,"You can return back to where you left off in the Bridge Node guide ",(0,r.kt)("a",{parentName:"p",href:"/nodes/validator-node#deploy-the-celestia-node"},"here")),(0,r.kt)("h2",{id:"configure-the-bridge-node"},"Configure The Bridge Node"),(0,r.kt)("p",null,"In order for your Celestia Bridge Node to communicate with other Bridge Nodes,\nthen you need to add them as ",(0,r.kt)("inlineCode",{parentName:"p"},"mutual peers")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"config.toml")," file and allow\nthe peer exchange. Please navigate to\n",(0,r.kt)("inlineCode",{parentName:"p"},"networks/devnet-2/celestia-node/mutual_peers.txt")," to find the list of\nmutual peers"),(0,r.kt)("p",null,"For more information on ",(0,r.kt)("inlineCode",{parentName:"p"},"config.toml"),", please navigate to ",(0,r.kt)("a",{parentName:"p",href:"/nodes/config-toml"},"this link")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"nano ~/.celestia-bridge/config.toml\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'...\n[P2P]\n  ...\n  #add multiaddresses of other celestia bridge nodes\n  \n  MutualPeers = [\n    "/ip4/46.101.22.123/tcp/2121/p2p/12D3KooWD5wCBJXKQuDjhXFjTFMrZoysGVLtVht5hMoVbSLCbV22",\n    "/ip4/x.x.x.x/tcp/yyy/p2p/abc"] \n    # the /ip4/x.x.x.x is only for example.\n    # Don\'t add it! \n  PeerExchange = true #change this line to true. By default it\'s false\n  ...\n...\n')),(0,r.kt)("p",null,"You can return back to where you left off in the Bridge Node guide ",(0,r.kt)("a",{parentName:"p",href:"/nodes/validator-node#start-the-bridge-node-with-systemd"},"here")),(0,r.kt)("h2",{id:"connect-validator"},"Connect Validator"),(0,r.kt)("p",null,"Continuing the Validator tutorial, here are the steps to connect your\nvalidator to Devnet:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'MONIKER="your_moniker"\nVALIDATOR_WALLET="validator"\n\ncelestia-appd tx staking create-validator \\\n    --amount=1000000celes \\\n    --pubkey=$(celestia-appd tendermint show-validator) \\\n    --moniker=$MONIKER \\\n    --chain-id=devnet-2 \\\n    --commission-rate=0.1 \\\n    --commission-max-rate=0.2 \\\n    --commission-max-change-rate=0.01 \\\n    --min-self-delegation=1000000 \\\n    --from=$VALIDATOR_WALLET\n')),(0,r.kt)("p",null,"You will be prompted to confirm the transaction:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"confirm transaction before signing and broadcasting [y/N]: y\n")),(0,r.kt)("p",null,"Inputting ",(0,r.kt)("inlineCode",{parentName:"p"},"y")," should provide an output similar to:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},'code: 0\ncodespace: ""\ndata: ""\ngas_used: "0"\ngas_wanted: "0"\nheight: "0"\ninfo: ""\nlogs: []\nraw_log: \'[]\'\ntimestamp: ""\ntx: null\ntxhash: <tx-hash>\n')),(0,r.kt)("p",null,"You should now be able to see your validator from a block explorer like ",(0,r.kt)("a",{parentName:"p",href:"https://celestia.observer/validators"},"here")))}h.isMDXComponent=!0}}]);