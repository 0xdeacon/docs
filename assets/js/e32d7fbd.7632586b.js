"use strict";(self.webpackChunkcelestia_docs=self.webpackChunkcelestia_docs||[]).push([[403],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),p=d(n),h=i,m=p["".concat(s,".").concat(h)]||p[h]||c[h]||l;return n?a.createElement(m,o(o({ref:t},u),{},{components:n})):a.createElement(m,o({ref:t},u))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,o=new Array(l);o[0]=p;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:i,o[1]=r;for(var d=2;d<l;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},7289:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return r},metadata:function(){return d},toc:function(){return c}});var a=n(7462),i=n(3366),l=(n(7294),n(3905)),o=["components"],r={},s="Setting Up A Celestia Light Node",d={unversionedId:"nodes/light-node",id:"nodes/light-node",title:"Setting Up A Celestia Light Node",description:"This tutorial will guide you through setting up a Celestia Light Node,",source:"@site/docs/nodes/light-node.md",sourceDirName:"nodes",slug:"/nodes/light-node",permalink:"/nodes/light-node",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/nodes/light-node.md",tags:[],version:"current",frontMatter:{},sidebar:"nodes",previous:{title:"Setting Up A Celestia Full Node",permalink:"/nodes/full-node"},next:{title:"Participate",permalink:"/category/participate"}},u={},c=[{value:"Overview of Light Nodes",id:"overview-of-light-nodes",level:2},{value:"Hardware Requirements",id:"hardware-requirements",level:2},{value:"Setting Up Your Light Node",id:"setting-up-your-light-node",level:2},{value:"Setup The Dependencies",id:"setup-the-dependencies",level:3},{value:"Install Celestia Node",id:"install-celestia-node",level:2},{value:"Run the Light Node",id:"run-the-light-node",level:3},{value:"Initialize the Light Node",id:"initialize-the-light-node",level:4},{value:"Start the Light Node",id:"start-the-light-node",level:4},{value:"Optional: Run the Light Node with a Custom Key",id:"optional-run-the-light-node-with-a-custom-key",level:4},{value:"Optional: Start Light Node with SystemD",id:"optional-start-light-node-with-systemd",level:4},{value:"Start The Daemon",id:"start-the-daemon",level:5},{value:"Check Daemon Status",id:"check-daemon-status",level:5},{value:"Check Daemon Logs",id:"check-daemon-logs",level:5},{value:"Data Availability Sampling(DAS)",id:"data-availability-samplingdas",level:2},{value:"Pre-Requisites",id:"pre-requisites",level:3},{value:"Create a wallet",id:"create-a-wallet",level:3},{value:"Send a transaction",id:"send-a-transaction",level:3},{value:"Observe DAS in action",id:"observe-das-in-action",level:3}],p={toc:c};function h(e){var t=e.components,r=(0,i.Z)(e,o);return(0,l.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"setting-up-a-celestia-light-node"},"Setting Up A Celestia Light Node"),(0,l.kt)("p",null,"This tutorial will guide you through setting up a Celestia Light Node,\nwhich can allow you to do data-sampling on the Data Availability (DA)\nnetwork."),(0,l.kt)("h2",{id:"overview-of-light-nodes"},"Overview of Light Nodes"),(0,l.kt)("p",null,"Light nodes (CLN) ensure data availability. This is the most common\nway to interact with the Celestia network."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Note: In future implementations, Light Nodes can also publish\ntransactions (",(0,l.kt)("a",{parentName:"p",href:"https://github.com/celestiaorg/celestia-node/blob/main/docs/adr/adr-004-state-interaction.md"},"see ADR"),"),\nthough in Mamaki, transactions are left to Bridge Nodes.")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"light-node",src:n(8236).Z,width:"1058",height:"245"})),(0,l.kt)("p",null,"Light Nodes have the following properties:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Listen for ExtendedHeaders, i.e. wrapped \u201craw\u201d headers, that notify\nCelestia Nodes of new block headers and relevant DA metadata."),(0,l.kt)("li",{parentName:"ol"},"Perform data availability sampling (DAS) on the received headers")),(0,l.kt)("h2",{id:"hardware-requirements"},"Hardware Requirements"),(0,l.kt)("p",null,"The following hardware minimum requirements are recommended for running\nthe light node:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Memory: 2 GB RAM"),(0,l.kt)("li",{parentName:"ul"},"CPU: Single Core"),(0,l.kt)("li",{parentName:"ul"},"Disk: 5 GB SSD Storage"),(0,l.kt)("li",{parentName:"ul"},"Bandwidth: 56 Kbps for Download/56 Kbps for Upload")),(0,l.kt)("h2",{id:"setting-up-your-light-node"},"Setting Up Your Light Node"),(0,l.kt)("p",null,"The following tutorial is done on an Ubuntu Linux 20.04 (LTS) x64 instance machine."),(0,l.kt)("h3",{id:"setup-the-dependencies"},"Setup The Dependencies"),(0,l.kt)("p",null,"Follow the tutorial on setting up your dependencies ",(0,l.kt)("a",{parentName:"p",href:"../developers/environment"},"here"),"."),(0,l.kt)("h2",{id:"install-celestia-node"},"Install Celestia Node"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Note: Make sure that you have at least 5+ Gb of free space for Celestia Light Node")),(0,l.kt)("p",null,"Follow the tutorial on installing Celestia Node ",(0,l.kt)("a",{parentName:"p",href:"../developers/celestia-node"},"here")),(0,l.kt)("h3",{id:"run-the-light-node"},"Run the Light Node"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"If you want to connect to your Celestia Bridge Node and start syncing the Celestia\nLight Node from a non-genesis hash, then consider editing ",(0,l.kt)("inlineCode",{parentName:"p"},"config.toml")," file.")),(0,l.kt)("p",null,"More information on ",(0,l.kt)("inlineCode",{parentName:"p"},"config.toml")," is found ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/celestiaorg/networks/blob/master/config-toml.md"},"here"),"."),(0,l.kt)("h4",{id:"initialize-the-light-node"},"Initialize the Light Node"),(0,l.kt)("p",null,"Run the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light init\n")),(0,l.kt)("h4",{id:"start-the-light-node"},"Start the Light Node"),(0,l.kt)("p",null,"Start the Light Node with a connection to a validator node's gRPC endpoint (which\nis usually exposed on port 9090):"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"NOTE: In order for access to the ability to get/submit state-related information,\nsuch as the ability to submit PayForData transactions, or query for the node's\naccount balance, a gRPC endpoint of a validator (core) node must be passed as\ndirected below.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light start --core.grpc <ip>:9090\n")),(0,l.kt)("p",null,"If you need a list of RPC endpoints to connect to, you can check from the list ",(0,l.kt)("a",{parentName:"p",href:"../nodes/mamaki-testnet#rpc-endpoints"},"here")),(0,l.kt)("h4",{id:"optional-run-the-light-node-with-a-custom-key"},"Optional: Run the Light Node with a Custom Key"),(0,l.kt)("p",null,"In order to run a light node using a custom key:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"The custom key must exist inside the celestia light node directory at the\ncorrect path (default: ",(0,l.kt)("inlineCode",{parentName:"li"},"~/.celestia-light/keys/keyring-test"),")"),(0,l.kt)("li",{parentName:"ol"},"The name of the custom key must be passed upon ",(0,l.kt)("inlineCode",{parentName:"li"},"start"),", like so:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light start --core.grpc <ip>:9090 --keyring.accname <name_of_custom_key>\n")),(0,l.kt)("h4",{id:"optional-start-light-node-with-systemd"},"Optional: Start Light Node with SystemD"),(0,l.kt)("p",null,"Start the Light Node as daemon process in the background"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"sudo tee <<EOF >/dev/null /etc/systemd/system/celestia-lightd.service\n[Unit]\nDescription=celestia-lightd Light Node\nAfter=network-online.target\n\n[Service]\nUser=$USER\nExecStart=$HOME/go/bin/celestia light start --core.grpc <ip>:9090\nRestart=on-failure\nRestartSec=3\nLimitNOFILE=4096\n\n[Install]\nWantedBy=multi-user.target\nEOF\n")),(0,l.kt)("p",null,"If the file was created succesfully you will be able to see its content:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"cat /etc/systemd/system/celestia-lightd.service\n")),(0,l.kt)("h5",{id:"start-the-daemon"},"Start The Daemon"),(0,l.kt)("p",null,"Enable and start celestia-lightd daemon:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"sudo systemctl enable celestia-lightd\nsudo systemctl start celestia-lightd\n")),(0,l.kt)("h5",{id:"check-daemon-status"},"Check Daemon Status"),(0,l.kt)("p",null,"Check if daemon has been started correctly:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"sudo systemctl status celestia-lightd\n")),(0,l.kt)("h5",{id:"check-daemon-logs"},"Check Daemon Logs"),(0,l.kt)("p",null,"Check daemon logs in real time:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"sudo journalctl -u celestia-lightd.service -f\n")),(0,l.kt)("p",null,"Now, the Celestia Light Node will start syncing headers.\nAfter sync is finished, Light Node will do Data Availability\nSampling (DAS) from the Bridge Node."),(0,l.kt)("h2",{id:"data-availability-samplingdas"},"Data Availability Sampling(DAS)"),(0,l.kt)("h3",{id:"pre-requisites"},"Pre-Requisites"),(0,l.kt)("p",null,"To continue, you will need:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"A Celestia Light Node connected to a Bridge Node"),(0,l.kt)("li",{parentName:"ul"},"A Celestia wallet")),(0,l.kt)("p",null,"Open 2 terminals in order to see how DASing works:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"First terminal: tail your Light Node logs"),(0,l.kt)("li",{parentName:"ol"},"Second terminal: use Celestia App's CLI to submit a paid\n",(0,l.kt)("inlineCode",{parentName:"li"},"payForMessage")," tx to the network")),(0,l.kt)("h3",{id:"create-a-wallet"},"Create a wallet"),(0,l.kt)("p",null,"First, you need a wallet to pay for the transaction."),(0,l.kt)("p",null,"Follow the tutorial on setting up a wallet ",(0,l.kt)("a",{parentName:"p",href:"../../developers/wallet"},"here"),"."),(0,l.kt)("h3",{id:"send-a-transaction"},"Send a transaction"),(0,l.kt)("p",null,"In the second terminal, submit a ",(0,l.kt)("inlineCode",{parentName:"p"},"payForMessage")," transaction with\n",(0,l.kt)("inlineCode",{parentName:"p"},"celestia-appd")," (or do so in the wallet):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"celestia-appd tx payment payForMessage <hex_namespace> <hex_message> \\\n--from <wallet_name> --keyring-backend <keyring-name> \\\n--chain-id <chain_name>\n")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"celestia-appd tx payment payForMessage 0102030405060708 \\\n68656c6c6f43656c6573746961444153 --from myWallet --keyring-backend test \\\n--chain-id devnet-2\n")),(0,l.kt)("h3",{id:"observe-das-in-action"},"Observe DAS in action"),(0,l.kt)("p",null,"In the Light Node logs you should see how data availability sampling works:"),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"INFO das das/daser.go:96 sampling successful {\u201cheight\u201d: 81547, \u201chash\u201d: \\\n\u201cDE0B0EB63193FC34225BD55CCD3841C701BE841F29523C428CE3685F72246D94\u201d, \\\n\u201csquare width\u201d: 2, \u201cfinished (s)\u201d: 0.000117466}\n")))}h.isMDXComponent=!0},8236:function(e,t,n){t.Z=n.p+"assets/images/LightNodes-6e065ce02c37e36a01707b9b1edd36b3.png"}}]);