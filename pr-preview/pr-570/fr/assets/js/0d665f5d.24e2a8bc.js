"use strict";(self.webpackChunkcelestia_docs=self.webpackChunkcelestia_docs||[]).push([[7840],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),g=l,m=p["".concat(s,".").concat(g)]||p[g]||d[g]||r;return n?a.createElement(m,o(o({ref:t},c),{},{components:n})):a.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,o=new Array(r);o[0]=g;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:l,o[1]=i;for(var u=2;u<r;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7294),l=n(6010);const r={tabItem:"tabItem_Ymn6"};function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,l.Z)(r.tabItem,o),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>y});var a=n(7462),l=n(7294),r=n(6010),o=n(2466),i=n(6550),s=n(1980),u=n(7392),c=n(12);function p(e){return function(e){return l.Children.map(e,(e=>{if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:l}}=e;return{value:t,label:n,attributes:a,default:l}}))}function d(e){const{values:t,children:n}=e;return(0,l.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function g(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const a=(0,i.k6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(r),(0,l.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(a.location.search);t.set(r,e),a.replace({...a.location,search:t.toString()})}),[r,a])]}function h(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,r=d(e),[o,i]=(0,l.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!g({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:r}))),[s,u]=m({queryString:n,groupId:a}),[p,h]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,r]=(0,c.Nk)(n);return[a,(0,l.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:a}),k=(()=>{const e=s??p;return g({value:e,tabValues:r})?e:null})();(0,l.useLayoutEffect)((()=>{k&&i(k)}),[k]);return{selectedValue:o,selectValue:(0,l.useCallback)((e=>{if(!g({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),h(e)}),[u,h,r]),tabValues:r}}var k=n(2389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function v(e){let{className:t,block:n,selectedValue:i,selectValue:s,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,o.o5)(),d=e=>{const t=e.currentTarget,n=c.indexOf(t),a=u[n].value;a!==i&&(p(t),s(a))},g=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:o}=e;return l.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>c.push(e),onKeyDown:g,onClick:d},o,{className:(0,r.Z)("tabs__item",b.tabItem,o?.className,{"tabs__item--active":i===t})}),n??t)})))}function f(e){let{lazy:t,children:n,selectedValue:a}=e;if(n=Array.isArray(n)?n:[n],t){const e=n.find((e=>e.props.value===a));return e?(0,l.cloneElement)(e,{className:"margin-top--md"}):null}return l.createElement("div",{className:"margin-top--md"},n.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function w(e){const t=h(e);return l.createElement("div",{className:(0,r.Z)("tabs-container",b.tabList)},l.createElement(v,(0,a.Z)({},e,t)),l.createElement(f,(0,a.Z)({},e,t)))}function y(e){const t=(0,k.Z)();return l.createElement(w,(0,a.Z)({key:String(t)},e))}},8842:(e,t,n)=>{n.d(t,{Z:()=>a});const a=Object.freeze({"app-latest-tag":"v0.12.1","app-latest-sha":"f2f855a62ee1533823fb2fe1819bc6873f108c35","core-latest-tag":"v1.17.0-tm-v0.34.27","core-latest-sha":"e3bad3d08ce3372fb7473b9e13be00cdaaa4fa91","node-latest-tag":"v0.8.0","node-latest-sha":"ef582655342c73384a66314972428b152227e428"})},578:(e,t,n)=>{n.d(t,{Z:()=>a});const a=Object.freeze({golangNode:"1.19.1",golangApp:"1.19.1",golangCore:"1.19.1",golang:"1.19.1",arabicaChainId:"arabica-6"})},4838:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>k,frontMatter:()=>u,metadata:()=>p,toc:()=>g});var a=n(7462),l=(n(7294),n(3905)),r=n(8842),o=n(578),i=n(4866),s=n(5162);const u={sidebar_label:"Prompt scavenger",description:"Learn how to interact with the Celestia Node API with this tutorial"},c="Prompt scavenger",p={unversionedId:"developers/prompt-scavenger",id:"developers/prompt-scavenger",title:"Prompt scavenger",description:"Learn how to interact with the Celestia Node API with this tutorial",source:"@site/docs/developers/prompt-scavenger.mdx",sourceDirName:"developers",slug:"/developers/prompt-scavenger",permalink:"/pr-preview/pr-570/fr/developers/prompt-scavenger",draft:!1,editUrl:"https://github.com/celestiaorg/docs/tree/main/docs/developers/prompt-scavenger.mdx",tags:[],version:"current",frontMatter:{sidebar_label:"Prompt scavenger",description:"Learn how to interact with the Celestia Node API with this tutorial"},sidebar:"developers",previous:{title:"Gateway API docs",permalink:"/pr-preview/pr-570/fr/developers/node-gateway-docs"},next:{title:"RPC API",permalink:"/pr-preview/pr-570/fr/category/rpc-api"}},d={},g=[{value:"Dependencies",id:"dependencies",level:2},{value:"Golang installation",id:"golang-installation",level:3},{value:"Install Celestia Node and run a Light Node",id:"install-celestia-node-and-run-a-light-node",level:3},{value:"Node API authentication key",id:"node-api-authentication-key",level:3},{value:"OpenAI key",id:"openai-key",level:3},{value:"Building the Prompt Scavenger",id:"building-the-prompt-scavenger",level:2},{value:"Copy over Go files",id:"copy-over-go-files",level:3},{value:"Build your import statements",id:"build-your-import-statements",level:3},{value:"Helpful functions",id:"helpful-functions",level:3},{value:"Wrapping up the functions",id:"wrapping-up-the-functions",level:3},{value:"Next steps",id:"next-steps",level:2}],m={toc:g},h="wrapper";function k(e){let{components:t,...n}=e;return(0,l.kt)(h,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"prompt-scavenger"},"Prompt scavenger"),(0,l.kt)("p",null,"Welcome to the world of Prompt Scavenger, a game where\nyou\u2019ll be using Celestia\u2019s Node API and OpenAI\u2019s GPT-3.5\nto decode hidden messages scattered throughout Celestia\u2019s\nblockchain. In this tutorial, we\u2019ll be using Golang to\nwrite the code for the game."),(0,l.kt)("p",null,"Through this tutorial, you\u2019ll gain experience using\nCelestia\u2019s Node API to fetch data from the blockchain,\nprocess it, and submit new transactions with that data.\nYou\u2019ll also learn how to integrate OpenAI\u2019s GPT-3.5 API\nto generate fun responses based on the data you\u2019ve found."),(0,l.kt)("p",null,"So if you\u2019re ready to embark on an adventure that combines\nblockchain technology with the power of AI, and learn some\nGolang along the way, let\u2019s get started!"),(0,l.kt)("h2",{id:"dependencies"},"Dependencies"),(0,l.kt)("p",null,"The following dependencies are needed to be installed or obtained:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Golang"),(0,l.kt)("li",{parentName:"ul"},"Celestia Light Node"),(0,l.kt)("li",{parentName:"ul"},"Getting an OpenAI API Key for GPT3.5")),(0,l.kt)("h3",{id:"golang-installation"},"Golang installation"),(0,l.kt)(i.Z,{groupId:"network",mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"blockspacerace",label:"Blockspace Race",mdxType:"TabItem"},(0,l.kt)(i.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"amd",label:"Ubuntu (AMD)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",null,'ver="',o.Z.golangNode,'" ',(0,l.kt)("br",null),"cd $HOME ",(0,l.kt)("br",null),'wget "https://golang.org/dl/go$ver.linux-amd64.tar.gz" ',(0,l.kt)("br",null),"sudo rm -rf /usr/local/go ",(0,l.kt)("br",null),'sudo tar -C /usr/local -xzf "go$ver.linux-amd64.tar.gz" ',(0,l.kt)("br",null),'rm "go$ver.linux-amd64.tar.gz" ',(0,l.kt)("br",null)))),(0,l.kt)(s.Z,{value:"arm",label:"Ubuntu (ARM)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",null,'ver="',o.Z.golangNode,'" ',(0,l.kt)("br",null),"cd $HOME ",(0,l.kt)("br",null),'wget "https://golang.org/dl/go$ver.linux-arm64.tar.gz" ',(0,l.kt)("br",null),"sudo rm -rf /usr/local/go ",(0,l.kt)("br",null),'sudo tar -C /usr/local -xzf "go$ver.linux-arm64.tar.gz" ',(0,l.kt)("br",null),'rm "go$ver.linux-arm64.tar.gz" ',(0,l.kt)("br",null)))),(0,l.kt)(s.Z,{value:"apple",label:"Mac (Apple)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",null,'ver="',o.Z.golangNode,'" ',(0,l.kt)("br",null),"cd $HOME ",(0,l.kt)("br",null),'wget "https://golang.org/dl/go$ver.darwin-arm64.tar.gz" ',(0,l.kt)("br",null),"sudo rm -rf /usr/local/go ",(0,l.kt)("br",null),'sudo tar -C /usr/local -xzf "go$ver.darwin-arm64.tar.gz" ',(0,l.kt)("br",null),'rm "go$ver.darwin-arm64.tar.gz" ',(0,l.kt)("br",null)))),(0,l.kt)(s.Z,{value:"mac",label:"Mac (Intel)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",null,'ver="',o.Z.golangNode,'" ',(0,l.kt)("br",null),"cd $HOME ",(0,l.kt)("br",null),'wget "https://golang.org/dl/go$ver.darwin-amd64.tar.gz" ',(0,l.kt)("br",null),"sudo rm -rf /usr/local/go ",(0,l.kt)("br",null),'sudo tar -C /usr/local -xzf "go$ver.darwin-amd64.tar.gz" ',(0,l.kt)("br",null),'rm "go$ver.darwin-amd64.tar.gz" ',(0,l.kt)("br",null))))),(0,l.kt)("p",null,"Now we need to add the ",(0,l.kt)("inlineCode",{parentName:"p"},"/usr/local/go/bin")," directory to ",(0,l.kt)("inlineCode",{parentName:"p"},"$PATH"),":"),(0,l.kt)(i.Z,{groupId:"shell",mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"bash",label:"bash",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'echo "export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin" >> $HOME/.bash_profile\nsource $HOME/.bash_profile\n'))),(0,l.kt)(s.Z,{value:"zsh",label:"zsh",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-zsh"},'echo "export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin" >> $HOME/.zshrc\nsource $HOME/.zshrc\n')))),(0,l.kt)("p",null,"To check if Go was installed correctly run:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"go version\n")),(0,l.kt)("p",null,"The output should be the version installed:"),(0,l.kt)(i.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"amd",label:"Ubuntu (AMD)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"go version go",o.Z.golangNode," linux/amd64"))),(0,l.kt)(s.Z,{value:"arm",label:"Ubuntu (ARM)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"go version go",o.Z.golangNode," linux/arm64"))),(0,l.kt)(s.Z,{value:"apple",label:"Mac (Apple)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"go version go",o.Z.golangNode," darwin/arm64"))),(0,l.kt)(s.Z,{value:"mac",label:"Mac (Intel)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"go version go",o.Z.golangNode," darwin/amd64"))))),(0,l.kt)(s.Z,{value:"mocha",label:"Mocha",mdxType:"TabItem"},(0,l.kt)(i.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"amd",label:"Ubuntu (AMD)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",null,'ver="',o.Z.golangNode,'" ',(0,l.kt)("br",null),"cd $HOME ",(0,l.kt)("br",null),'wget "https://golang.org/dl/go$ver.linux-amd64.tar.gz" ',(0,l.kt)("br",null),"sudo rm -rf /usr/local/go ",(0,l.kt)("br",null),'sudo tar -C /usr/local -xzf "go$ver.linux-amd64.tar.gz" ',(0,l.kt)("br",null),'rm "go$ver.linux-amd64.tar.gz" ',(0,l.kt)("br",null)))),(0,l.kt)(s.Z,{value:"arm",label:"Ubuntu (ARM)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",null,'ver="',o.Z.golangNode,'" ',(0,l.kt)("br",null),"cd $HOME ",(0,l.kt)("br",null),'wget "https://golang.org/dl/go$ver.linux-arm64.tar.gz" ',(0,l.kt)("br",null),"sudo rm -rf /usr/local/go ",(0,l.kt)("br",null),'sudo tar -C /usr/local -xzf "go$ver.linux-arm64.tar.gz" ',(0,l.kt)("br",null),'rm "go$ver.linux-arm64.tar.gz" ',(0,l.kt)("br",null)))),(0,l.kt)(s.Z,{value:"apple",label:"Mac (Apple)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",null,'ver="',o.Z.golangNode,'" ',(0,l.kt)("br",null),"cd $HOME ",(0,l.kt)("br",null),'wget "https://golang.org/dl/go$ver.darwin-arm64.tar.gz" ',(0,l.kt)("br",null),"sudo rm -rf /usr/local/go ",(0,l.kt)("br",null),'sudo tar -C /usr/local -xzf "go$ver.darwin-arm64.tar.gz" ',(0,l.kt)("br",null),'rm "go$ver.darwin-arm64.tar.gz" ',(0,l.kt)("br",null)))),(0,l.kt)(s.Z,{value:"mac",label:"Mac (Intel)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",null,'ver="',o.Z.golangNode,'" ',(0,l.kt)("br",null),"cd $HOME ",(0,l.kt)("br",null),'wget "https://golang.org/dl/go$ver.darwin-amd64.tar.gz" ',(0,l.kt)("br",null),"sudo rm -rf /usr/local/go ",(0,l.kt)("br",null),'sudo tar -C /usr/local -xzf "go$ver.darwin-amd64.tar.gz" ',(0,l.kt)("br",null),'rm "go$ver.darwin-amd64.tar.gz" ',(0,l.kt)("br",null))))),(0,l.kt)("p",null,"Now we need to add the ",(0,l.kt)("inlineCode",{parentName:"p"},"/usr/local/go/bin")," directory to ",(0,l.kt)("inlineCode",{parentName:"p"},"$PATH"),":"),(0,l.kt)(i.Z,{groupId:"shell",mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"bash",label:"bash",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'echo "export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin" >> $HOME/.bash_profile\nsource $HOME/.bash_profile\n'))),(0,l.kt)(s.Z,{value:"zsh",label:"zsh",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-zsh"},'echo "export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin" >> $HOME/.zshrc\nsource $HOME/.zshrc\n')))),(0,l.kt)("p",null,"To check if Go was installed correctly run:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"go version\n")),(0,l.kt)("p",null,"The output should be the version installed:"),(0,l.kt)(i.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"amd",label:"Ubuntu (AMD)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"go version go",o.Z.golangNode," linux/amd64"))),(0,l.kt)(s.Z,{value:"arm",label:"Ubuntu (ARM)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"go version go",o.Z.golangNode," linux/arm64"))),(0,l.kt)(s.Z,{value:"apple",label:"Mac (Apple)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"go version go",o.Z.golangNode," darwin/arm64"))),(0,l.kt)(s.Z,{value:"mac",label:"Mac (Intel)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"go version go",o.Z.golangNode," darwin/amd64"))))),(0,l.kt)(s.Z,{value:"arabica",label:"Arabica \ud83c\udfd7\ufe0f",mdxType:"TabItem"},(0,l.kt)(i.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"amd",label:"Ubuntu (AMD)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",null,'ver="',o.Z.golangNode,'" ',(0,l.kt)("br",null),"cd $HOME ",(0,l.kt)("br",null),'wget "https://golang.org/dl/go$ver.linux-amd64.tar.gz" ',(0,l.kt)("br",null),"sudo rm -rf /usr/local/go ",(0,l.kt)("br",null),'sudo tar -C /usr/local -xzf "go$ver.linux-amd64.tar.gz" ',(0,l.kt)("br",null),'rm "go$ver.linux-amd64.tar.gz" ',(0,l.kt)("br",null)))),(0,l.kt)(s.Z,{value:"arm",label:"Ubuntu (ARM)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",null,'ver="',o.Z.golangNode,'" ',(0,l.kt)("br",null),"cd $HOME ",(0,l.kt)("br",null),'wget "https://golang.org/dl/go$ver.linux-arm64.tar.gz" ',(0,l.kt)("br",null),"sudo rm -rf /usr/local/go ",(0,l.kt)("br",null),'sudo tar -C /usr/local -xzf "go$ver.linux-arm64.tar.gz" ',(0,l.kt)("br",null),'rm "go$ver.linux-arm64.tar.gz" ',(0,l.kt)("br",null)))),(0,l.kt)(s.Z,{value:"apple",label:"Mac (Apple)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",null,'ver="',o.Z.golangNode,'" ',(0,l.kt)("br",null),"cd $HOME ",(0,l.kt)("br",null),'wget "https://golang.org/dl/go$ver.darwin-arm64.tar.gz" ',(0,l.kt)("br",null),"sudo rm -rf /usr/local/go ",(0,l.kt)("br",null),'sudo tar -C /usr/local -xzf "go$ver.darwin-arm64.tar.gz" ',(0,l.kt)("br",null),'rm "go$ver.darwin-arm64.tar.gz" ',(0,l.kt)("br",null)))),(0,l.kt)(s.Z,{value:"mac",label:"Mac (Intel)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",null,'ver="',o.Z.golangNode,'" ',(0,l.kt)("br",null),"cd $HOME ",(0,l.kt)("br",null),'wget "https://golang.org/dl/go$ver.darwin-amd64.tar.gz" ',(0,l.kt)("br",null),"sudo rm -rf /usr/local/go ",(0,l.kt)("br",null),'sudo tar -C /usr/local -xzf "go$ver.darwin-amd64.tar.gz" ',(0,l.kt)("br",null),'rm "go$ver.darwin-amd64.tar.gz" ',(0,l.kt)("br",null))))),(0,l.kt)("p",null,"Now we need to add the ",(0,l.kt)("inlineCode",{parentName:"p"},"/usr/local/go/bin")," directory to ",(0,l.kt)("inlineCode",{parentName:"p"},"$PATH"),":"),(0,l.kt)(i.Z,{groupId:"shell",mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"bash",label:"bash",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'echo "export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin" >> $HOME/.bash_profile\nsource $HOME/.bash_profile\n'))),(0,l.kt)(s.Z,{value:"zsh",label:"zsh",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-zsh"},'echo "export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin" >> $HOME/.zshrc\nsource $HOME/.zshrc\n')))),(0,l.kt)("p",null,"To check if Go was installed correctly run:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"go version\n")),(0,l.kt)("p",null,"The output should be the version installed:"),(0,l.kt)(i.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"amd",label:"Ubuntu (AMD)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"go version go",o.Z.golangNode," linux/amd64"))),(0,l.kt)(s.Z,{value:"arm",label:"Ubuntu (ARM)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"go version go",o.Z.golangNode," linux/arm64"))),(0,l.kt)(s.Z,{value:"apple",label:"Mac (Apple)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"go version go",o.Z.golangNode," darwin/arm64"))),(0,l.kt)(s.Z,{value:"mac",label:"Mac (Intel)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"go version go",o.Z.golangNode," darwin/amd64")))))),(0,l.kt)("h3",{id:"install-celestia-node-and-run-a-light-node"},"Install Celestia Node and run a Light Node"),(0,l.kt)("p",null,"Install the ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia-node")," binary by running the following commands:"),(0,l.kt)("pre",null,(0,l.kt)("code",null,"cd $HOME ",(0,l.kt)("br",null),"rm -rf celestia-node ",(0,l.kt)("br",null),"git clone https://github.com/celestiaorg/celestia-node.git ",(0,l.kt)("br",null),"cd celestia-node/ ",(0,l.kt)("br",null),"git checkout tags/",r.Z["node-latest-tag"]," ",(0,l.kt)("br",null),"make build ",(0,l.kt)("br",null),"make install ",(0,l.kt)("br",null),"make cel-key ",(0,l.kt)("br",null))),(0,l.kt)("pre",null,(0,l.kt)("code",null,"$ celestia version ",(0,l.kt)("br",null),"Semantic version: ",r.Z["node-latest-tag"]," ",(0,l.kt)("br",null),"Commit: ",r.Z["node-latest-sha"]," ",(0,l.kt)("br",null),"Build Date: Thu Dec 15 10:19:22 PM UTC 2022 ",(0,l.kt)("br",null),"System version: amd64/linux ",(0,l.kt)("br",null),"Golang version: go",o.Z.golangNode," ",(0,l.kt)("br",null))),(0,l.kt)("p",null,"Let\u2019s run the following commands to get our env\nvars setup (NOTE: For ",(0,l.kt)("inlineCode",{parentName:"p"},"CORE_IP")," you can select\nfrom list of available RPC endpoints ",(0,l.kt)("a",{parentName:"p",href:"https://docs.celestia.org/nodes/blockspace-race/#rpc-endpoints"},"here"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'KEYNAME="scavenger_key"\nNODETYPE="light"\nNETWORK="blockspacerace"\nAUTHTYPE="admin"\nCORE_IP=""\n')),(0,l.kt)("p",null,"First, let\u2019s generate a wallet key for our light node:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"./cel-key add $KEYNAME --keyring-backend test --node.type $NODETYPE --p2p.network $NETWORK\n")),(0,l.kt)("p",null,"Be sure to save the mnemonics and your celestia1 public\naddress in a safe place."),(0,l.kt)("p",null,"Then head over to our Discord Server and request tokens from\nthe ",(0,l.kt)("inlineCode",{parentName:"p"},"#faucet")," channel under Blockspace Race."),(0,l.kt)("p",null,"You can track receiving the funds on the explorer here: ",(0,l.kt)("a",{parentName:"p",href:"https://testnet.mintscan.io/celestia-incentivized-testnet"},"Interchain Explorer by Cosmostation")),(0,l.kt)("p",null,"Just make sure to paste your ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia1****")," address in order to look it up."),(0,l.kt)("p",null,"We will be running this version of Celestia Node with Blockspace\nRace test network. First, let\u2019s initialize our node:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light init --p2p.network blockspacerace\n")),(0,l.kt)("p",null,"Next, we will start our node:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light start --core.ip $CORE_IP --p2p.network $NETWORK --gateway --gateway.addr 12\n7.0.0.1 --gateway.port 26659 --keyring.accname $KEYNAME\n")),(0,l.kt)("p",null,"You should now have a running light node on your machine.\nThe rest of the tutorial will assume you will be building the\nscript and running it where the light node is in your localhost."),(0,l.kt)("h3",{id:"node-api-authentication-key"},"Node API authentication key"),(0,l.kt)("p",null,"In the same machine as where you Celestia Light Node is running, run the following:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"export AUTH_TOKEN=$(celestia $NODETYPE auth $AUTHTYPE)\n")),(0,l.kt)("p",null,"Now run the following to get the auth token for your node:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"echo $AUTH_TOKEN\n")),(0,l.kt)("p",null,"This will be used for the env var file we setup later."),(0,l.kt)("h3",{id:"openai-key"},"OpenAI key"),(0,l.kt)("p",null,"Make sure to go over to ",(0,l.kt)("a",{parentName:"p",href:"https://openai.com/"},"OpenAI")," in\norder to sign up to an account and generate an OpenAI API key.\nThe key will be needed to communicate with OpenAI."),(0,l.kt)("h2",{id:"building-the-prompt-scavenger"},"Building the Prompt Scavenger"),(0,l.kt)("p",null,"We will first need to setup a ",(0,l.kt)("inlineCode",{parentName:"p"},".env")," file with the following pasted in:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-.env"},'NODE_RPC_IP="http://localhost:26658"\nNODE_JWT_TOKEN=""\nOPENAI_KEY=""\nNAMESPACE_ID="00000000ce1e571a"\n')),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"OPENAI_KEY")," is the API key you got from Open AI.\nFor ",(0,l.kt)("inlineCode",{parentName:"p"},"NODE_RPC_IP"),", it is assumed to be the local host but\nit can point to a light node that is remote. ",(0,l.kt)("inlineCode",{parentName:"p"},"NODE_JWT_TOKEN")," is\nthe ",(0,l.kt)("inlineCode",{parentName:"p"},"AUTH_TOKEN")," you generated earlier. For Namespace ID, we\nmade a sample one for you to use but you can generate your own."),(0,l.kt)("p",null,"Now, let\u2019s build!"),(0,l.kt)("h3",{id:"copy-over-go-files"},"Copy over Go files"),(0,l.kt)("p",null,"Run the following:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"mkdir test_scavenger\ngit clone https://github.com/celestiaorg/PromptScavenger.git\ncp PromptScavenger/go.mod test_scavenger/\ncp PromptScavenger/go.sum test_scavenger/\ncd test_scavenger\n")),(0,l.kt)("p",null,"This will copy over the required ",(0,l.kt)("inlineCode",{parentName:"p"},"go.sum")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"go.mod")," files\nto a new directory we will use to import the Node API golang library."),(0,l.kt)("h3",{id:"build-your-import-statements"},"Build your import statements"),(0,l.kt)("p",null,"Inside the directory, create a ",(0,l.kt)("inlineCode",{parentName:"p"},"main.go"),"file and setup the import statements:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n        "context"\n        "fmt"\n        "log"\n        "os"\n\n        "github.com/celestiaorg/celestia-node/api/rpc/client"\n        nodeheader "github.com/celestiaorg/celestia-node/header"\n        "github.com/celestiaorg/nmt/namespace"\n        "github.com/joho/godotenv"\n        cosmosmath "cosmossdk.io/math"\n        openai "github.com/sashabaranov/go-openai"\n        "encoding/base64"\n        "encoding/hex"\n)\n\nfunc main() {\n  // TODO\n}\n')),(0,l.kt)("p",null,"Here we setup all required libraries we need to use plus the ",(0,l.kt)("inlineCode",{parentName:"p"},"main"),"\nfunction where we will use for our game."),(0,l.kt)("h3",{id:"helpful-functions"},"Helpful functions"),(0,l.kt)("p",null,"First we will need to create some helpful functions that you will\nneed later."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'// loadEnv loads environment variables from the .env file.\nfunc loadEnv() {\n        err := godotenv.Load(".env")\n        if err != nil {\n                log.Fatal("Error loading .env file")\n        }\n}\n')),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"loadEnv")," function allows us to load up our ",(0,l.kt)("inlineCode",{parentName:"p"},".env")," file which\nhas all the necessary env vars needed."),(0,l.kt)("p",null,"Next, let\u2019s create a helper function that allows us to load an\ninstance of the Celestia Node client given the correct env\nvars passed to it:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'// createClient initializes a new Celestia node client.\nfunc createClient(ctx context.Context) *client.Client {\n        nodeRPCIP := os.Getenv("NODE_RPC_IP")\n        jwtToken := os.Getenv("NODE_JWT_TOKEN")\n\n        rpc, err := client.NewClient(ctx, nodeRPCIP, jwtToken)\n        if err != nil {\n                log.Fatalf("Error creating client: %v", err)\n        }\n\n        return rpc\n}\n')),(0,l.kt)("p",null,"As you can see, here the Celestia Node client takes in the Node\nRPC IP and the JWT Token we setup before."),(0,l.kt)("p",null,"Now, if we go back to our ",(0,l.kt)("inlineCode",{parentName:"p"},"main")," function, we can do the following\nto setup and load our env and client:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"\nfunc main() {\n  ctx, cancel := context.WithCancel(context.Background())\n  defer cancel()\n  loadEnv()\n\n  // Close the client when you are finished\n  client.Close()\n}\n")),(0,l.kt)("p",null,"Here, we setup a workflow that allows us to load our env vars,\ninstantiate the client with it, then close the client."),(0,l.kt)("p",null,"Now, let\u2019s build some more helpful functions:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'func createNamespaceID() []byte {\n        nIDString := os.Getenv("NAMESPACE_ID")\n        data, err := hex.DecodeString(nIDString)\n        if err != nil {\n                log.Fatalf("Error decoding hex string:", err)\n        }\n        // Encode the byte array in Base64\n        base64Str := base64.StdEncoding.EncodeToString(data)\n        namespaceID, err := base64.StdEncoding.DecodeString(base64Str)\n        if err != nil {\n                log.Fatalf("Error decoding Base64 string:", err)\n        }\n        return namespaceID\n}\n')),(0,l.kt)("p",null,"Here, we are creating a helpful function called ",(0,l.kt)("inlineCode",{parentName:"p"},"createNameSpaceID"),"\nthat given a string for a namespace ID, it can decode the hex\nstring, encode it after to a byte array, then decode it as a base64\nstring which is needed by Node API."),(0,l.kt)("p",null,"We will need to create just a few more functions before we wrap up things."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'// postDataAndGetHeight submits a new transaction with the\n// provided data to the Celestia node.\nfunc postDataAndGetHeight(client *client.Client, namespaceID namespace.ID, payLoad [\n]byte, fee cosmosmath.Int, gasLimit uint64) uint64 {\n        response, err := client.State.SubmitPayForBlob(context.Background(), namespa\nceID, payLoad, fee, gasLimit)\n        if err != nil {\n                log.Fatalf("Error submitting pay for blob: %v", err)\n        }\n        fmt.Printf("Got output: %v", response)\n        height := uint64(response.Height)\n        fmt.Printf("Height that data was submitted at: %v", height)\n        return height\n}\n')),(0,l.kt)("p",null,"In the function ",(0,l.kt)("inlineCode",{parentName:"p"},"postDataAndGetHeight"),", we show you how to submit\na message to a specific namespace ID provided on Celestia. After\na successful submission, the function returns back to you the block\nheight it was submitted at."),(0,l.kt)("p",null,"Next, implement the following function:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'func getDataAsPrompt(client *client.Client, height uint64, namespaceID namespace.ID)\n string {\n        headerParam := getHeader(client, height)\n        response, err := client.Share.GetSharesByNamespace(context.Background(), hea\nderParam.DAH, namespaceID)\n        if err != nil {\n                log.Fatalf("Error getting shares by namespace data for block height:\n %v. Error is %v", height, err)\n        }\n        var dataString string\n        for _, shares := range response {\n                for _, share := range shares.Shares {\n                        dataString = string(share[8:])\n                }\n        }\n        return dataString\n}\n')),(0,l.kt)("p",null,"In the function ",(0,l.kt)("inlineCode",{parentName:"p"},"getDataAsPrompt"),", we show a helpful function that given a particular block height and a namespace ID, it can return back the block data (called shares here) which we then convert to a string and return it back."),(0,l.kt)("p",null,"Finally, we implement a GPT-3.5 helper function that given a prompt, it returns back a statement:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'// gpt3 processes a given message using GPT-3 and prints the response.\nfunc gpt3(msg string) {\n        // Set the authentication header\n        openAIKey := os.Getenv("OPENAI_KEY")\n        client := openai.NewClient(openAIKey)\n        resp, err := client.CreateChatCompletion(\n                context.Background(),\n                openai.ChatCompletionRequest{\n                        Model: openai.GPT3Dot5Turbo,\n                        Messages: []openai.ChatCompletionMessage{\n                                {\n                                        Role:    openai.ChatMessageRoleUser,\n                                        Content: msg,\n                                },\n                        },\n                },\n        )\n\n        if err != nil {\n                fmt.Printf("ChatCompletion error: %v\\n", err)\n                return\n        }\n        fmt.Println(resp.Choices[0].Message.Content)\n}\n')),(0,l.kt)("h3",{id:"wrapping-up-the-functions"},"Wrapping up the functions"),(0,l.kt)("p",null,"Now, we will update our ",(0,l.kt)("inlineCode",{parentName:"p"},"main"),"function to include the logic from the functions we built where we show you how to do the following:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Instantiate namespace ID, fee, gas limit and GPT prompt"),(0,l.kt)("li",{parentName:"ul"},"Submit the GPT prompt as a PayForBlob transaction and then get back the Block Height"),(0,l.kt)("li",{parentName:"ul"},"Get Back the Prompt from that Block Height as a Data Share and convert it to a string and return it"),(0,l.kt)("li",{parentName:"ul"},"Submit that string to the GPT function to get a prompt output")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'func main() {\n        ctx, cancel := context.WithCancel(context.Background())\n        defer cancel()\n        loadEnv()\n        var namespaceID namespace.ID = createNamespaceID()\n        client := createClient(ctx)\n        var gasLimit uint64 = 6000000\n        fee := cosmosmath.NewInt(10000)\n        var gptPrompt string = "What are modular blockchains?"\n        prompt := []byte{0x00, 0x01, 0x02}\n        prompt = append(prompt, []byte(gptPrompt)...)\n        height := postDataAndGetHeight(client, namespaceID, prompt, fee, gasLimit)\n        promptString := getDataAsPrompt(client, height, namespaceID)\n        gpt3(promptString)\n        // Close the client when you are finished\n        client.Close()\n}\n')),(0,l.kt)("p",null,"And now you have the final version of the game!"),(0,l.kt)("p",null,"Run the golang script with the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"go run main.go\n")),(0,l.kt)("p",null,"After some time, it\u2019ll post the output of the prompt you submitted to OpenAI that you pulled from Celestia\u2019s blockchain."),(0,l.kt)("h2",{id:"next-steps"},"Next steps"),(0,l.kt)("p",null,"With this tutorial, you were able to construct a PFB transaction, submit it to Celestia, get it back from Celestia and decode its contents, then for added bonus, submit the message to GPT-3.5."),(0,l.kt)("p",null,"For the next steps, we will be releasing quests to this tutorial where users will need to complete challenges that helps familiarize them with the Celestia Data Availability layer."))}k.isMDXComponent=!0}}]);