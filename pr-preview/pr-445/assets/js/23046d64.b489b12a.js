"use strict";(self.webpackChunkcelestia_docs=self.webpackChunkcelestia_docs||[]).push([[6e3],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=s(n),m=a,h=u["".concat(p,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(h,l(l({ref:t},c),{},{components:n})):r.createElement(h,l({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[u]="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4454:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_label:"Node API tutorial"},l="Node API tutorial",i={unversionedId:"developers/node-api-tutorial",id:"developers/node-api-tutorial",title:"Node API tutorial",description:"This tutorial will teach you how to interact with a node's API.",source:"@site/docs/developers/node-api-tutorial.mdx",sourceDirName:"developers",slug:"/developers/node-api-tutorial",permalink:"/pr-preview/pr-445/developers/node-api-tutorial",draft:!1,editUrl:"https://github.com/celestiaorg/docs/tree/main/docs/developers/node-api-tutorial.mdx",tags:[],version:"current",frontMatter:{sidebar_label:"Node API tutorial"},sidebar:"developers",previous:{title:"Node API",permalink:"/pr-preview/pr-445/developers/node-api"},next:{title:"Gateway API docs",permalink:"/pr-preview/pr-445/developers/node-gateway-docs"}},p={},s=[{value:"cURL section",id:"curl-section",level:2},{value:"Go dev section",id:"go-dev-section",level:2}],c={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"node-api-tutorial"},"Node API tutorial"),(0,a.kt)("p",null,"This tutorial will teach you how to interact with a node's API."),(0,a.kt)("p",null,"First, ",(0,a.kt)("a",{parentName:"p",href:"../../nodes/light-node"},"install celestia-node"),"."),(0,a.kt)("p",null,"Initalize your node:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"celestia <node_type> init --p2p.network <network>\n")),(0,a.kt)("p",null,"Start your node:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"celestia <node_type> start --p2p.network <network>\n")),(0,a.kt)("h2",{id:"curl-section"},"cURL section"),(0,a.kt)("p",null,"In another terminal instance, run the following command to generate the JWT auth token\nand set it as a variable:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# make sure to add network flags if you're using a network other than the default\n# auth level can be any of the following [read || write || admin]\n\nexport AUTH_TOKEN=$(celestia <node_type> auth <auth level>)\n")),(0,a.kt)("p",null,"You'll also need the port that is exposed on your node, by default it is 26658."),(0,a.kt)("p",null,"To view the CLI menu:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"celestia light auth -h\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'# returns the node\'s SamplingStats\n\ncurl -X POST -H \'Authorization: Bearer \'$AUTH_TOKEN\'\' -H \'Content-Type: application/json\' -d \'{"jsonrpc":"2.0","id":0,"method":"das.SamplingStats","params":[]}\' http://localhost:26658/ | jq\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'# returns the node\'s chain head\n\ncurl -X POST -H \'Authorization: Bearer \'$AUTH_TOKEN\'\' -H \'Content-Type: application/json\' -d \'{"jsonrpc":"2.0","id":0,"method":"header.Head","params":[]}\' http://localhost:26658/ | jq\n')),(0,a.kt)("h2",{id:"go-dev-section"},"Go dev section"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"link to Rene's repo"),(0,a.kt)("li",{parentName:"ul"},"README with explanation & comments in Go files"),(0,a.kt)("li",{parentName:"ul"},"what is necessary to communicate for how to interact with your node with Go")))}d.isMDXComponent=!0}}]);