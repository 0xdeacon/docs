"use strict";(self.webpackChunkcelestia_docs=self.webpackChunkcelestia_docs||[]).push([[3024],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(r),h=o,m=u["".concat(s,".").concat(h)]||u[h]||d[h]||a;return r?n.createElement(m,i(i({ref:t},p),{},{components:r})):n.createElement(m,i({ref:t},p))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=h;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[u]="string"==typeof e?e:o,i[1]=c;for(var l=2;l<a;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},9569:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var n=r(7462),o=(r(7294),r(3905));const a={},i="Introducing the Quantum Gravity Bridge (QGB) Orchestrator-Relayer",c={unversionedId:"nodes/qgb-intro",id:"nodes/qgb-intro",title:"Introducing the Quantum Gravity Bridge (QGB) Orchestrator-Relayer",description:"The QGB orchestrator-relayer is a crucial component in the implementation",source:"@site/docs/nodes/qgb-intro.md",sourceDirName:"nodes",slug:"/nodes/qgb-intro",permalink:"/pr-preview/pr-668/nodes/qgb-intro",draft:!1,editUrl:"https://github.com/celestiaorg/docs/tree/main/docs/nodes/qgb-intro.md",tags:[],version:"current",frontMatter:{},sidebar:"nodes",previous:{title:"QGB",permalink:"/pr-preview/pr-668/category/qgb"},next:{title:"Orchestrator",permalink:"/pr-preview/pr-668/nodes/qgb-orchestrator"}},s={},l=[],p={toc:l},u="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"introducing-the-quantum-gravity-bridge-qgb-orchestrator-relayer"},"Introducing the Quantum Gravity Bridge (QGB) Orchestrator-Relayer"),(0,o.kt)("p",null,"The QGB orchestrator-relayer is a crucial component in the implementation\nof the Quantum Gravity Bridge. It is designed to streamline communication\nbetween different blockchain networks, specifically between Celestia and\nEthereum Virtual Machine (EVM) chains. The orchestrator is responsible\nfor signing QGB attestations, while the relayer ensures that these attestations\nare relayed to the target EVM chain."),(0,o.kt)("p",null,"You can view the ",(0,o.kt)("inlineCode",{parentName:"p"},"orchestrator-relayer")," repository\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/celestiaorg/orchestrator-relayer"},"here"),".\nRead more about the QGB\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/celestiaorg/quantum-gravity-bridge/tree/76efeca0be1a17d32ef633c0fdbd3c8f5e4cc53f#how-it-works"},"here"),"\nand ",(0,o.kt)("a",{parentName:"p",href:"https://blog.celestia.org/celestiums/"},"here"),"."),(0,o.kt)("p",null,"In order to utilize the QGB orchestrator-relayer, users need to set up the\nappropriate environment and tools. This involves installing Go 1.20.2, cloning\nthe repository, and installing the QGB CLI. Once set up, users can run the\norchestrator if they are a Celestia-app validator or deploy a new QGB contract\nand run a relayer to post commitments on an EVM chain."))}d.isMDXComponent=!0}}]);