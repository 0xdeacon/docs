"use strict";(self.webpackChunkcelestia_docs=self.webpackChunkcelestia_docs||[]).push([[8131],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return u}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(t),u=o,y=m["".concat(s,".").concat(u)]||m[u]||d[u]||a;return t?r.createElement(y,i(i({ref:n},c),{},{components:t})):r.createElement(y,i({ref:n},c))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3011:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return i},default:function(){return d},frontMatter:function(){return a},metadata:function(){return l},toc:function(){return p}});var r=t(3117),o=(t(7294),t(3905));const a={sidebar_label:"Helpful CLI Commands"},i="Helpful CLI Commands",l={unversionedId:"developers/celestia-node-commands",id:"developers/celestia-node-commands",title:"Helpful CLI Commands",description:"View all options for celestia-node:",source:"@site/docs/developers/celestia-node-commands.md",sourceDirName:"developers",slug:"/developers/celestia-node-commands",permalink:"/pr-preview/pr-311/fr/developers/celestia-node-commands",draft:!1,editUrl:"https://github.com/celestiaorg/docs/tree/main/docs/developers/celestia-node-commands.md",tags:[],version:"current",frontMatter:{sidebar_label:"Helpful CLI Commands"},sidebar:"developers",previous:{title:"Node API",permalink:"/pr-preview/pr-311/fr/developers/node-api"},next:{title:"Docker Setup",permalink:"/pr-preview/pr-311/fr/developers/docker"}},s={},p=[{value:"Using the <code>cel-key</code> utility",id:"using-the-cel-key-utility",level:2},{value:"Importing keys",id:"importing-keys",level:3}],c={toc:p};function d(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"helpful-cli-commands"},"Helpful CLI Commands"),(0,o.kt)("p",null,"View all options for ",(0,o.kt)("inlineCode",{parentName:"p"},"celestia-node"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},'$ celestia --help\n\n        ____      __          __  _\n      / ____/__  / /__  _____/ /_(_)___ _\n     / /   / _ \\/ / _ \\/ ___/ __/ / __  /\n    / /___/  __/ /  __(__  ) /_/ / /_/ /\n    \\____/\\___/_/\\___/____/\\__/_/\\__,_/\n\nUsage:\n  celestia [command]\n\nAvailable Commands:\n  bridge      Manage your Bridge node\n  full        Manage your Full node\n  light       Manage your Light node\n  version     Show information about the current binary build\n\nFlags:\n  -h, --help   help for celestia\n\nAdditional help topics:\n  celestia\n\nUse "celestia [command] --help" for more information about a command.\n')),(0,o.kt)("h2",{id:"using-the-cel-key-utility"},"Using the ",(0,o.kt)("inlineCode",{parentName:"h2"},"cel-key")," utility"),(0,o.kt)("p",null,"You will need to have generated the ",(0,o.kt)("inlineCode",{parentName:"p"},"cel-key")," utility using ",(0,o.kt)("inlineCode",{parentName:"p"},"make cel-key"),"\nto use the utility."),(0,o.kt)("p",null,"View all options for ",(0,o.kt)("inlineCode",{parentName:"p"},"cel-key"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'$ ./cel-key --help\nKeyring management commands. These keys may be in any format supported by the\nTendermint crypto library and can be used by light-clients, full nodes, or any other application\nthat needs to sign with a private key.\n\nThe keyring supports the following backends:\n\n    os          Uses the operating system\'s default credentials store.\n    file        Uses encrypted file-based keystore within the app\'s configuration directory.\n                This keyring will request a password each time it is accessed, which may occur\n                multiple times in a single command resulting in repeated password prompts.\n    kwallet     Uses KDE Wallet Manager as a credentials management application.\n    pass        Uses the pass command line utility to store and retrieve keys.\n    test        Stores keys insecurely to disk. It does not prompt for a password to be unlocked\n                and it should be use only for testing purposes.\n\nkwallet and pass backends depend on external tools. Refer to their respective documentation for more\ninformation:\n    KWallet     https://github.com/KDE/kwallet\n    pass        https://www.passwordstore.org/\n\nThe pass backend requires GnuPG: https://gnupg.org/\n\nUsage:\n  keys [command]\n\nAvailable Commands:\n  add         Add an encrypted private key (either newly generated or recovered), encrypt it, and save to <name> file\n  completion  Generate the autocompletion script for the specified shell\n  delete      Delete the given keys\n  export      Export private keys\n  help        Help about any command\n  import      Import private keys into the local keybase\n  list        List all keys\n  migrate     Migrate keys from amino to proto serialization format\n  mnemonic    Compute the bip39 mnemonic for some input entropy\n  parse       Parse address from hex to bech32 and vice versa\n  rename      Rename an existing key\n  show        Retrieve key information by name or address\n\nFlags:\n  -h, --help                     help for keys\n      --home string              The application home directory (default "~")\n      --keyring-backend string   Select keyring\'s backend (os|file|test) (default "os")\n      --keyring-dir string       The client Keyring directory; if omitted, the default \'home\' directory will be used\n      --node.network string      Sets key utility to use the node network\'s directory (e.g. ~/.celestia-light-mynetwork if --node.network MyNetwork is passed). (default "arabica-1")\n      --node.type string         Sets key utility to use the node type\'s directory (e.g. ~/.celestia-light-arabica-1 if --node.type light is passed).\n      --output string            Output format (text|json) (default "text")\n\nUse "keys [command] --help" for more information about a command.\n')),(0,o.kt)("h3",{id:"importing-keys"},"Importing keys"),(0,o.kt)("p",null,"Importing from a mnemonic:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"./cel-key add <KEY_NAME> --recover --keyring-backend test --node.type <NODE_TYPE>\n")),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"./cel-key add alice --recover --keyring-backend test --node.type light\n")),(0,o.kt)("p",null,"You will then be prompted to enter your bip39 mnemonic."))}d.isMDXComponent=!0}}]);