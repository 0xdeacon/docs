"use strict";(self.webpackChunkcelestia_docs=self.webpackChunkcelestia_docs||[]).push([[4798],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return k}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(t),k=a,m=d["".concat(c,".").concat(k)]||d[k]||u[k]||o;return t?r.createElement(m,i(i({ref:n},p),{},{components:t})):r.createElement(m,i({ref:n},p))}));function k(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4556:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return i},default:function(){return u},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return s}});var r=t(3117),a=(t(7294),t(3905));const o={sidebar_label:"Managing Wallets in Docker"},i="Docker and `cel-key`",l={unversionedId:"developers/docker-node-key",id:"developers/docker-node-key",title:"Docker and `cel-key`",description:"Prerequisites",source:"@site/docs/developers/docker-node-key.md",sourceDirName:"developers",slug:"/developers/docker-node-key",permalink:"/pr-preview/pr-453/developers/docker-node-key",draft:!1,editUrl:"https://github.com/celestiaorg/docs/tree/main/docs/developers/docker-node-key.md",tags:[],version:"current",frontMatter:{sidebar_label:"Managing Wallets in Docker"},sidebar:"developers",previous:{title:"Wallet with Celestia Node",permalink:"/pr-preview/pr-453/developers/celestia-node-key"},next:{title:"Data Availability API",permalink:"/pr-preview/pr-453/category/data-availability-api"}},c={},s=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Running your node",id:"running-your-node",level:2},{value:"Mounting existing keys to container",id:"mounting-existing-keys-to-container",level:2}],p={toc:s};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"docker-and-cel-key"},"Docker and ",(0,a.kt)("inlineCode",{parentName:"h1"},"cel-key")),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("p",null,"First, familiarize yourself with the ",(0,a.kt)("a",{parentName:"p",href:"/pr-preview/pr-453/nodes/docker-images"},"guide"),"\non how to run ",(0,a.kt)("inlineCode",{parentName:"p"},"celestia-node")," with Docker."),(0,a.kt)("h2",{id:"running-your-node"},"Running your node"),(0,a.kt)("p",null,"Run the Docker image (in this example, we are using a Light Node):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker run --name celestia-node -e NODE_TYPE=light -e P2P_NETWORK=mocha -p 26659:26659 \\\nghcr.io/celestiaorg/celestia-node:sha-747c9e5 celestia light start \\\n--core.ip https://rpc-mocha.pops.one \\\n--gateway --gateway.addr 127.0.0.1 --gateway.port 26659 --p2p.network mocha\n")),(0,a.kt)("p",null,"List active containers in another window with:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker ps\n")),(0,a.kt)("p",null,"The response will look like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'CONTAINER ID   IMAGE           COMMAND                  CREATED          STATUS          PORTS      NAMES\n<container_id>   celestia-node   "/entrypoint.sh cele\u2026"   22 seconds ago   Up 21 seconds   2121/tcp   docker-compose-test-celestia-1\n')),(0,a.kt)("p",null,"Interact with the container by replacing ",(0,a.kt)("inlineCode",{parentName:"p"},"<container_id>")," for the container ID:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker exec -ti <container_id> /bin/bash\n")),(0,a.kt)("p",null,"Now, interact with ",(0,a.kt)("inlineCode",{parentName:"p"},"cel-key")," to check for the key that was autogenerated when\nyou started the node:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"./cel-key list --keyring-backend test --node.type light\n")),(0,a.kt)("p",null,"You can also export your key from the container. In the next section, you'll\nlearn how to mount existing keys to the container."),(0,a.kt)("h2",{id:"mounting-existing-keys-to-container"},"Mounting existing keys to container"),(0,a.kt)("p",null,"In this example, we'll be mounting an existing key to the container. We're also\nusing an existing image called ",(0,a.kt)("inlineCode",{parentName:"p"},"celestia-node"),". This will mount the entire\n",(0,a.kt)("inlineCode",{parentName:"p"},"/.celestia-light-<p2p_network>/keys")," directory to your image."),(0,a.kt)("p",null,"Write a ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," to accomplish this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3.8'\nservices:\n  celestia:\n    image: celestia-node\n    environment:\n      - NODE_TYPE=light\n    command: celestia light start --core.ip https://rpc-mocha.pops.one --gateway --gateway.addr 127.0.0.1 --gateway.port 26659 --p2p.network mocha --keyring.accname my_celes_key\n    volumes:\n      - ${PWD}/keys:/root/.celestia-light-mocha/keys\n    ports:\n      - 26659:26659\n")),(0,a.kt)("p",null,"Start the container by running the following command in the directory with your ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose.yml"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose up\n")),(0,a.kt)("p",null,"List active containers in another window with:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker ps\n")),(0,a.kt)("p",null,"The response will look like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'CONTAINER ID   IMAGE           COMMAND                  CREATED          STATUS          PORTS      NAMES\n<container_id>   celestia-node   "/entrypoint.sh cele\u2026"   22 seconds ago   Up 21 seconds   2121/tcp   docker-compose-test-celestia-1\n')),(0,a.kt)("p",null,"Interact with the container by replacing <container_id> for the container ID:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker exec -ti <container_id> /bin/bash\n")),(0,a.kt)("p",null,"Now, interact with ",(0,a.kt)("inlineCode",{parentName:"p"},"cel-key")," to check your address matches the address you\nexpect with the key you mounted:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'root@<container_id>:/# ./cel-key list --keyring-backend test --node.type light\nusing directory:  ~/.celestia-light-mocha/keys\n- address: celestia1wkhyhr7ngf0ayqlpnsnxg4d72hfs5453dvunm9\n  name: my_celes_key\n  pubkey: \'{"@type":"/cosmos.crypto.secp256k1.PubKey","key":"A1/NsoY0RGL7Hqt4VWLg441GQKJsZ2fBUnZXipgns8oV"}\'\n  type: local\n')))}u.isMDXComponent=!0}}]);