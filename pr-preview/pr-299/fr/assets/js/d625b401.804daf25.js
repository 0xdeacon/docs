"use strict";(self.webpackChunkcelestia_docs=self.webpackChunkcelestia_docs||[]).push([[4585],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return g}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},p=Object.keys(e);for(r=0;r<p.length;r++)n=p[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(r=0;r<p.length;r++)n=p[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var a=r.createContext({}),c=function(e){var t=r.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(a.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,p=e.originalType,a=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),d=c(n),g=i,m=d["".concat(a,".").concat(g)]||d[g]||u[g]||p;return n?r.createElement(m,s(s({ref:t},l),{},{components:n})):r.createElement(m,s({ref:t},l))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var p=n.length,s=new Array(p);s[0]=d;var o={};for(var a in t)hasOwnProperty.call(t,a)&&(o[a]=t[a]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var c=2;c<p;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1859:function(e,t,n){n.r(t),n.d(t,{assets:function(){return a},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return p},metadata:function(){return o},toc:function(){return c}});var r=n(3117),i=(n(7294),n(3905));const p={sidebar_label:"Message Types"},s="\ud83d\udcac\xa0Create message types",o={unversionedId:"developers/recipe-message",id:"developers/recipe-message",title:"\ud83d\udcac\xa0Create message types",description:"Create a message type and its handler with the message command:",source:"@site/docs/developers/recipe-message.mdx",sourceDirName:"developers",slug:"/developers/recipe-message",permalink:"/pr-preview/pr-299/fr/developers/recipe-message",draft:!1,editUrl:"https://github.com/celestiaorg/docs/tree/main/docs/developers/recipe-message.mdx",tags:[],version:"current",frontMatter:{sidebar_label:"Message Types"},sidebar:"developers",previous:{title:"Scaffold your Rollup",permalink:"/pr-preview/pr-299/fr/developers/recipe-scaffold"},next:{title:"Wordle",permalink:"/pr-preview/pr-299/fr/category/wordle"}},a={},c=[{value:"\ud83e\udd3f\xa0Diving deeper into the message code",id:"diving-deeper-into-the-message-code",level:2},{value:"\ud83d\udcd5\xa0Define messages logic",id:"define-messages-logic",level:2},{value:"\ud83d\udcd7\xa0Define <code>Recipe</code> type and <code>AppendRecipe</code> keeper method",id:"define-recipe-type-and-appendrecipe-keeper-method",level:2},{value:"\ud83d\udcd8\xa0Define keeper methods",id:"define-keeper-methods",level:2},{value:"\ud83d\udda5\xa0Display recipes",id:"display-recipes",level:2},{value:"\ud83d\udc69\u200d\ud83d\udcbb\xa0Use the CLI to create your first recipe",id:"use-the-cli-to-create-your-first-recipe",level:2},{value:"\u2328\ufe0f\xa0Query your recipes with the CLI",id:"\ufe0fquery-your-recipes-with-the-cli",level:2}],l={toc:c};function u(e){let{components:t,...p}=e;return(0,i.kt)("wrapper",(0,r.Z)({},l,p,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"create-message-types"},"\ud83d\udcac\xa0Create message types"),(0,i.kt)("p",null,"Create a message type and its handler with the ",(0,i.kt)("inlineCode",{parentName:"p"},"message")," command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"ignite scaffold message createRecipe dish ingredients\n")),(0,i.kt)("p",null,"Response:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"modify proto/recipes/recipes/tx.proto\nmodify x/recipes/client/cli/tx.go\ncreate x/recipes/client/cli/tx_create_recipe.go\ncreate x/recipes/keeper/msg_server_create_recipe.go\nmodify x/recipes/module_simulation.go\ncreate x/recipes/simulation/create_recipe.go\nmodify x/recipes/types/codec.go\ncreate x/recipes/types/message_create_recipe.go\ncreate x/recipes/types/message_create_recipe_test.go\n\n\ud83c\udf89 Created a message `createRecipe`.\n")),(0,i.kt)("p",null,"Head to your ",(0,i.kt)("inlineCode",{parentName:"p"},"recipes/proto/recipes/recipes/tx.proto")," file and you\u2019ll see the ",(0,i.kt)("inlineCode",{parentName:"p"},"MsgCreateRecipe")," has been created. Add ",(0,i.kt)("inlineCode",{parentName:"p"},"uint64 id = 1;")," to the ",(0,i.kt)("inlineCode",{parentName:"p"},"MsgCreateRecipeResponse")," function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-protobuf",metastring:'title="recipes/proto/recipes/recipes/tx.proto"',title:'"recipes/proto/recipes/recipes/tx.proto"'},"message MsgCreateRecipeResponse {\n  uint64 id = 1;\n}\n")),(0,i.kt)("h2",{id:"diving-deeper-into-the-message-code"},"\ud83e\udd3f\xa0Diving deeper into the message code"),(0,i.kt)("p",null,"Looking further into the message, we can see that ",(0,i.kt)("inlineCode",{parentName:"p"},"MsgCreateRecipe")," has 3 fields: creator, dish, and ingredients."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-protobuf",metastring:'title="recipes/proto/recipes/recipes/tx.proto"',title:'"recipes/proto/recipes/recipes/tx.proto"'},"message MsgCreateRecipe {\n  string creator = 1;\n  string dish = 2;\n  string ingredients = 3;\n}\n")),(0,i.kt)("p",null,"We can also see that the ",(0,i.kt)("inlineCode",{parentName:"p"},"CreateRecipe")," RPC has already been added to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Msg")," service:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-protobuf",metastring:'title="recipes/proto/recipes/recipes/tx.proto"',title:'"recipes/proto/recipes/recipes/tx.proto"'},"service Msg {\n  rpc CreateRecipe(MsgCreateRecipe) returns (MsgCreateRecipeResponse);\n}\n")),(0,i.kt)("h2",{id:"define-messages-logic"},"\ud83d\udcd5\xa0Define messages logic"),(0,i.kt)("p",null,"Navigate to ",(0,i.kt)("inlineCode",{parentName:"p"},"recipes/x/recipes/keeper/msg_server_create_recipe.go"),". For our recipes chain, we want the dish and ingredients to be written to the blockchain\u2019s state as a new recipe. Add the following code to the ",(0,i.kt)("inlineCode",{parentName:"p"},"CreateRecipe")," function underneath the imports:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="recipes/x/recipes/keeper/msg_server_create_recipe.go"',title:'"recipes/x/recipes/keeper/msg_server_create_recipe.go"'},"func (k msgServer) CreateRecipe(goCtx context.Context, msg *types.MsgCreateRecipe) (*types.MsgCreateRecipeResponse, error) {\n  // Get the context\n  ctx := sdk.UnwrapSDKContext(goCtx)\n\n  // Create variable of type Recipe\n  var recipe = types.Recipe{\n     Creator: msg.Creator,\n     Dish: msg.Dish,\n     Ingredients: msg.Ingredients,\n  }\n\n  // Add a recipe to the store and get back the ID\n  id := k.AppendRecipe(ctx, recipe)\n\n  // Return the ID of the recipe\n  return &types.MsgCreateRecipeResponse{Id: id}, nil\n}\n")),(0,i.kt)("p",null,"You will see errors in your text editor, which we will resolve in the next step."),(0,i.kt)("h2",{id:"define-recipe-type-and-appendrecipe-keeper-method"},"\ud83d\udcd7\xa0Define ",(0,i.kt)("inlineCode",{parentName:"h2"},"Recipe")," type and ",(0,i.kt)("inlineCode",{parentName:"h2"},"AppendRecipe")," keeper method"),(0,i.kt)("p",null,"Create a file ",(0,i.kt)("inlineCode",{parentName:"p"},"recipes/proto/recipes/recipes/recipe.proto")," and define the ",(0,i.kt)("inlineCode",{parentName:"p"},"Recipe")," message:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="recipes/proto/recipes/recipes/recipe.proto"',title:'"recipes/proto/recipes/recipes/recipe.proto"'},'syntax = "proto3";\n\npackage recipes.recipes;\n\noption go_package = "recipes/x/recipes/types";\n\nmessage Recipe {\n  string creator = 1;\n  uint64 id = 2;\n  string dish = 3; \n  string ingredients = 4; \n}\n')),(0,i.kt)("h2",{id:"define-keeper-methods"},"\ud83d\udcd8\xa0Define keeper methods"),(0,i.kt)("p",null,"Now you\u2019ll define your ",(0,i.kt)("inlineCode",{parentName:"p"},"AppendRecipe")," keeper method."),(0,i.kt)("p",null,"Create the ",(0,i.kt)("inlineCode",{parentName:"p"},"recipes/x/recipes/keeper/recipe.go")," file. The ",(0,i.kt)("inlineCode",{parentName:"p"},"AppendRecipe")," function is a placeholder to brainstorm how to implement it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="recipes/x/recipes/keeper/recipe.go"',title:'"recipes/x/recipes/keeper/recipe.go"'},'package keeper\n\nimport (\n  "encoding/binary"\n\n  "github.com/cosmos/cosmos-sdk/store/prefix"\n  sdk "github.com/cosmos/cosmos-sdk/types"\n\n  "recipes/x/recipes/types"\n)\n\n// func (k Keeper) AppendRecipe() uint64 {\n//    count := k.GetRecipeCount()\n//    store.Set()\n//    k.SetRecipeCount()\n//    return count\n// }\n')),(0,i.kt)("p",null,"Add these prefixes to the ",(0,i.kt)("inlineCode",{parentName:"p"},"recipes/x/recipes/types/keys.go")," file in the ",(0,i.kt)("inlineCode",{parentName:"p"},"const")," and add a comment for your reference:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="recipes/x/recipes/types/keys.go"',title:'"recipes/x/recipes/types/keys.go"'},'const (\n  //...\n\n  // Keep track of the index of recipes  \n  RecipeKey      = "Recipe-value-"\n  RecipeCountKey = "Recipe-count-"\n)\n')),(0,i.kt)("p",null,"Next, implement ",(0,i.kt)("inlineCode",{parentName:"p"},"GetRecipeCount"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="recipes/x/recipes/keeper/recipe.go"',title:'"recipes/x/recipes/keeper/recipe.go"'},'func (k Keeper) GetRecipeCount(ctx sdk.Context) uint64 {\n    // Get the store using storeKey (which is "recipes") and RecipeCountKey (which is "Recipe-count-")\n    store := prefix.NewStore(ctx.KVStore(k.storeKey), []byte(types.RecipeCountKey))\n  \n    // Convert the RecipeCountKey to bytes\n    byteKey := []byte(types.RecipeCountKey)\n  \n    // Get the value of the count\n    bz := store.Get(byteKey)\n  \n    // Return zero if the count value is not found (for example, it\'s the first recipe)\n    if bz == nil {\n      return 0\n    }\n  \n    // Convert the count into a uint64\n    return binary.BigEndian.Uint64(bz)\n}\n')),(0,i.kt)("p",null,"And then ",(0,i.kt)("inlineCode",{parentName:"p"},"SetRecipeCount"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="recipes/x/recipes/keeper/recipe.go"',title:'"recipes/x/recipes/keeper/recipe.go"'},'func (k Keeper) SetRecipeCount(ctx sdk.Context, count uint64) {\n    // Get the store using storeKey (which is "recipes") and RecipeCountKey (which is "Recipe-count-")\n    store := prefix.NewStore(ctx.KVStore(k.storeKey), []byte(types.RecipeCountKey))\n  \n    // Convert the RecipeCountKey to bytes\n    byteKey := []byte(types.RecipeCountKey)\n  \n    // Convert count from uint64 to string and get bytes\n    bz := make([]byte, 8)\n    binary.BigEndian.PutUint64(bz, count)\n  \n    // Set the value of Recipe-count- to count\n    store.Set(byteKey, bz)\n}\n')),(0,i.kt)("p",null,"Now you\u2019re ready to implement the ",(0,i.kt)("inlineCode",{parentName:"p"},"AppendRecipe")," function at the top of the file above ",(0,i.kt)("inlineCode",{parentName:"p"},"GetRecipeCount")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"SetRecipeCount"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="recipes/x/recipes/keeper/recipe.go"',title:'"recipes/x/recipes/keeper/recipe.go"'},"func (k Keeper) AppendRecipe (ctx sdk.Context, recipe types.Recipe) uint64 {\n    // Get the current number of recipes in the store\n    count := k.GetRecipeCount(ctx)\n  \n    // Assign an ID to the recipe based on the number of recipes in the store\n    recipe.Id = count\n  \n    // Get the store\n    store := prefix.NewStore(ctx.KVStore(k.storeKey), []byte(types.RecipeKey))\n  \n    // Convert the recipe ID into bytes\n    byteKey := make([]byte, 8)\n    binary.BigEndian.PutUint64(byteKey, recipe.Id)\n  \n    // Marshal the recipe into bytes\n    appendedValue := k.cdc.MustMarshal(&recipe)\n  \n    // Insert the recipe bytes using recipe ID as a key\n    store.Set(byteKey, appendedValue)\n  \n    // Update the recipe count\n    k.SetRecipeCount(ctx, count+1)\n    return count\n}\n")),(0,i.kt)("p",null,"Now you have implemented all the code required to create new recipes and store them on-chain. When a transaction that contains a message type ",(0,i.kt)("inlineCode",{parentName:"p"},"MsgCreateRecipe")," is broadcast, the message is routed to the recipes module."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"x/recipes/handler.go")," calls ",(0,i.kt)("inlineCode",{parentName:"li"},"k.CreateRecipe")," which calls ",(0,i.kt)("inlineCode",{parentName:"li"},"AppendRecipe"),", which gets the recipe count, adds a recipe using the count as the ID, increments the count, and returns the ID")),(0,i.kt)("h2",{id:"display-recipes"},"\ud83d\udda5\xa0Display recipes"),(0,i.kt)("p",null,"In order to display recipes, scaffold a query:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"ignite scaffold query dishes --response dish,ingredients\n")),(0,i.kt)("p",null,"Response:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"modify proto/recipes/recipes/query.proto\nmodify x/recipes/client/cli/query.go\ncreate x/recipes/client/cli/query_dishes.go\ncreate x/recipes/keeper/grpc_query_dishes.go\n\n\ud83c\udf89 Created a query `dishes`.\n")),(0,i.kt)("p",null,"In the ",(0,i.kt)("inlineCode",{parentName:"p"},"proto/recipes/recipes/query.proto")," file import:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-protobuf",metastring:'title="proto/recipes/recipes/query.proto"',title:'"proto/recipes/recipes/query.proto"'},'import "recipes/recipes/recipe.proto";\n')),(0,i.kt)("p",null,"Add pagination to the recipe request:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-protobuf",metastring:'title="proto/recipes/recipes/query.proto"',title:'"proto/recipes/recipes/query.proto"'},"message QueryDishesRequest {\n  // Adding pagination to request\n  cosmos.base.query.v1beta1.PageRequest pagination = 1;\n}\n")),(0,i.kt)("p",null,"Add pagination to the recipe response:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-protobuf",metastring:'title="proto/recipes/recipes/query.proto"',title:'"proto/recipes/recipes/query.proto"'},"message QueryDishesResponse {\n  // Returning a list of recipes\n  repeated Recipe Recipe = 1;\n\n  // Adding pagination to response\n  cosmos.base.query.v1beta1.PageResponse pagination = 2;\n}\n")),(0,i.kt)("p",null,"In order to implement recipe querying logic in ",(0,i.kt)("inlineCode",{parentName:"p"},"recipes/x/recipes/keeper/grpc_query_dishes.go"),", delete the file contents and replace them with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="recipes/x/recipes/keeper/grpc_query_dishes.go"',title:'"recipes/x/recipes/keeper/grpc_query_dishes.go"'},'package keeper\n\nimport (\n    "context"\n\n    "github.com/cosmos/cosmos-sdk/store/prefix"\n    sdk "github.com/cosmos/cosmos-sdk/types"\n    "github.com/cosmos/cosmos-sdk/types/query"\n    "google.golang.org/grpc/codes"\n    "google.golang.org/grpc/status"\n\n    "recipes/x/recipes/types"\n)\n\nfunc (k Keeper) Dishes(c context.Context, req *types.QueryDishesRequest) (*types.QueryDishesResponse, error) {\n  // Throw an error if request is nil\n  if req == nil {\n    return nil, status.Error(codes.InvalidArgument, "invalid request")\n  }\n\n  // Define a variable that will store a list of recipes\n  var dishes []*types.Recipe\n\n  // Get context with the information about the environment\n  ctx := sdk.UnwrapSDKContext(c)\n\n  // Get the key-value module store using the store key (in our case store key is "chain")\n  store := ctx.KVStore(k.storeKey)\n\n  // Get the part of the store that keeps recipes (using recipe key, which is "Recipe-value-")\n  recipeStore := prefix.NewStore(store, []byte(types.RecipeKey))\n\n  // Paginate the recipes store based on PageRequest\n  pageRes, err := query.Paginate(recipeStore, req.Pagination, func(key []byte, value []byte) error {\n    var dish types.Recipe\n    if err := k.cdc.Unmarshal(value, &dish); err != nil {\n      return err\n    }\n\n    dishes = append(dishes, &dish)\n\n    return nil\n  })\n\n  // Throw an error if pagination failed\n  if err != nil {\n    return nil, status.Error(codes.Internal, err.Error())\n  }\n\n  // Return a struct containing a list of recipes and pagination info\n  return &types.QueryDishesResponse{Recipe: dishes, Pagination: pageRes}, nil\n}\n')),(0,i.kt)("h2",{id:"use-the-cli-to-create-your-first-recipe"},"\ud83d\udc69\u200d\ud83d\udcbb\xa0Use the CLI to create your first recipe"),(0,i.kt)("p",null,"Start the chain with ","[add rollmint command]",":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"ignite chain serve\n")),(0,i.kt)("p",null,"Stop your chain using ",(0,i.kt)("inlineCode",{parentName:"p"},"Ctrl+C"),"."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"../nodes/light-node#start-the-light-node"},"Run a Celestia Light Node.")),(0,i.kt)("p",null,"Start your Rollmint chain:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'recipesd start --rollmint.aggregator true --rollmint.da_layer celestia --rollmint.da_config=\'{"base_url":"http://localhost:26658","timeout":60000000000,"gas_limit":6000000}\' --rollmint.namespace_id 000000000000FFFF --rollmint.da_start_height 100783\n')),(0,i.kt)("p",null,"Create your first recipe in the command line, when prompted, confirm the transaction by entering ",(0,i.kt)("inlineCode",{parentName:"p"},"y"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"recipesd tx recipes create-recipe salad vegetables --from alice\n")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"send-tx.png",src:n(9221).Z,width:"3164",height:"2062"})),(0,i.kt)("h2",{id:"\ufe0fquery-your-recipes-with-the-cli"},"\u2328\ufe0f\xa0Query your recipes with the CLI"),(0,i.kt)("p",null,"To query all of the on-chain recipes:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"recipesd q recipes dishes\n")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"query.png",src:n(7802).Z,width:"3164",height:"2062"})),(0,i.kt)("p",null,"\ud83c\udf89\xa0Congratulations, again! You have now successfully built a recipe book blockchain!"))}u.isMDXComponent=!0},7802:function(e,t,n){t.Z=n.p+"assets/images/query-8a0666b48a3392e266eb3ef7c515173a.png"},9221:function(e,t,n){t.Z=n.p+"assets/images/send-tx-43450358f69e11eab7fa98e2e42123b8.png"}}]);