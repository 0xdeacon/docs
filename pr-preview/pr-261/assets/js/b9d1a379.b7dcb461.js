"use strict";(self.webpackChunkcelestia_docs=self.webpackChunkcelestia_docs||[]).push([[8985],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),h=i,m=d["".concat(l,".").concat(h)]||d[h]||p[h]||o;return n?a.createElement(m,r(r({ref:t},u),{},{components:n})):a.createElement(m,r({ref:t},u))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var c=2;c<o;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4918:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return r},default:function(){return p},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return c}});var a=n(3117),i=(n(7294),n(3905));const o={},r="Fork Choice Rule with Data Availability Sampling",s={unversionedId:"concepts/specifications/fork-choice-das",id:"concepts/specifications/fork-choice-das",title:"Fork Choice Rule with Data Availability Sampling",description:"- Preamble",source:"@site/docs/concepts/specifications/fork-choice-das.md",sourceDirName:"concepts/specifications",slug:"/concepts/specifications/fork-choice-das",permalink:"/pr-preview/pr-261/concepts/specifications/fork-choice-das",draft:!1,editUrl:"https://github.com/celestiaorg/docs/tree/main/docs/concepts/specifications/fork-choice-das.md",tags:[],version:"current",frontMatter:{},sidebar:"concepts",previous:{title:"Rationale",permalink:"/pr-preview/pr-261/category/rationale"},next:{title:"Message Layout",permalink:"/pr-preview/pr-261/concepts/specifications/message-block-layout"}},l={},c=[{value:"Preamble",id:"preamble",level:2},{value:"Invalid vs Unavailable",id:"invalid-vs-unavailable",level:2},{value:"Scenarios",id:"scenarios",level:2},{value:"Scenario 1",id:"scenario-1",level:3},{value:"Scenario 2",id:"scenario-2",level:3}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"fork-choice-rule-with-data-availability-sampling"},"Fork Choice Rule with Data Availability Sampling"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#preamble"},"Preamble")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#invalid-vs-unavailable"},"Invalid vs Unavailable")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#scenarios"},"Scenarios"))),(0,i.kt)("h2",{id:"preamble"},"Preamble"),(0,i.kt)("p",null,"Tendermint provides finality under an honest 2/3 of voting\npower assumption. It is one of several\n",(0,i.kt)("a",{parentName:"p",href:"https://arxiv.org/abs/1807.04938"},'"BFT" consensus protocols'),'\n(also known as "classical" consensus protocols).\nUnder that assumption, new ',(0,i.kt)("em",{parentName:"p"},"valid")," blocks are immediately and\nforever final as soon as 2/3 of voting power commits to the block.\nTherefore, under that assumption, Tendermint is fork-free."),(0,i.kt)("p",null,"Contemporary blockchains support full nodes (which are\nsecure under no assumption on voting power honesty) and\nlight nodes (which are secure under an honest majority of\nvoting power assumption). Celestia is unique in\n",(0,i.kt)("a",{parentName:"p",href:"/pr-preview/pr-261/nodes/light-node"},"supporting light nodes with stronger security guarantees"),":"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Full nodes are secure under no assumptions on voting power honesty"),(0,i.kt)("li",{parentName:"ol"},"Light nodes are secure under ",(0,i.kt)("a",{parentName:"li",href:"https://arxiv.org/abs/1809.09044"},"an honest minority of nodes and synchronous communication"),",\nand no assumptions on voting power honesty")),(0,i.kt)("p",null,"Note that ",(0,i.kt)("em",{parentName:"p"},"secure"),' in this context is defined as "not accepting invalid blocks"\nand is orthogonal to ',(0,i.kt)("em",{parentName:"p"},"consensus safety"),". The introduction of light nodes\nthat do not depend on an honest majority assumption also introduces additional\ncases that must be analyzed."),(0,i.kt)("h2",{id:"invalid-vs-unavailable"},"Invalid vs Unavailable"),(0,i.kt)("p",null,"Tendermint (and other consensus protocols) requires blocks to be ",(0,i.kt)("em",{parentName:"p"},"valid"),",\ni.e. pass a ",(0,i.kt)("a",{parentName:"p",href:"https://arxiv.org/abs/1807.04938"},"validity predicate")," before\nthey are accepted by an honest node. Note that both validity and invalidity\nare deterministic and monotonic, i.e. that once a block is valid or invalid,\nit will be valid or invalid for all future time."),(0,i.kt)("p",null,"With ",(0,i.kt)("a",{parentName:"p",href:"https://arxiv.org/abs/1809.09044"},"Data Availability Sampling")," (DAS),\nthere is a notion of ",(0,i.kt)("em",{parentName:"p"},"available")," and ",(0,i.kt)("em",{parentName:"p"},"unavailable")," blocks. Both are\nprobabilistic rather than deterministic. Availability is assumed\nmonotonic (i.e. once a block is available, it will remain available since\nThe Internet Never Forgets), but unavailability is not. A block proposer\nmay hide a block to make currently-online nodes see the block as unavailable,\nthen reveal the entire (valid) block at a later time."),(0,i.kt)("h2",{id:"scenarios"},"Scenarios"),(0,i.kt)("p",null,"We consider two scenarios."),(0,i.kt)("h3",{id:"scenario-1"},"Scenario 1"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"A dishonest majority hide a committed block, commit to a second block\nat the same height within the weak subjectivity window to fork the chain,\nthen reveal the first block"),"."),(0,i.kt)("p",null,"This is trivially equivocation and requires social consensus to resolve\nwhich fork to accept. The unavailability of the first block is orthogonal.\nNodes that detect equivocation by a majority of voting power within the weak\nsubjectivity window must halt regardless."),(0,i.kt)("h3",{id:"scenario-2"},"Scenario 2"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"A dishonest majority hide a committed block, commit additional blocks on\ntop of it, then reveal the first block within the weak subjectivity window"),"."),(0,i.kt)("p",null,"There is no equivocation. Note that a node cannot distinguish a dishonest\nmajority in this scenario from a transient network failure on their end and\nan honest majority."),(0,i.kt)("p",null,"A requirement is that full nodes and light nodes agree on the same head\nof the chain automatically in this case, i.e. without human intervention."),(0,i.kt)("p",null,"Light nodes follow consensus state (i.e. validator set changes and commits)\nand perform DAS. If a block is seen as unavailable but has a commit, DAS is\nperformed on the block continuously until either DAS passes, or the weak\nsubjectivity window is exceeded at which point the node halts."),(0,i.kt)("p",null,"Full nodes fully download and execute blocks. If a block is seen as\nunavailable but has a commit, full downloading is re-attempted continuously\nuntil either it succeeds, or the weak subjectivity window is exceeded at\nwhich point the node halts."),(0,i.kt)("p",null,"Under ",(0,i.kt)("a",{parentName:"p",href:"https://arxiv.org/abs/1809.09044"},"an honest minority of nodes and synchronous communication"),"\nassumptions, passing DAS probabilistically guarantees the block can be\nfully downloaded. Therefore, the above protocol guarantees light nodes\nand full nodes will agree on the same head automatically without manual\nintervention, under a synchrony assumption equal to the unbonding window\n(formal proof pending)."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Note: whether re-downloading/re-sampling is attempted at a fixed interval\nor on receipt of a new block header with a Tendermint commit is an\nimplementation detail.")),(0,i.kt)("p",null,"Another thing to consider:"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Note: users may wish to set a much shorter timeout than the unbonding\nwindow before they are notified of their node being unable to verify the\navailability of a committed block. This does not affect the properties\nanalyzed above, but may result in more manual attention in the event of\nintermittent network disruptions.")))}p.isMDXComponent=!0}}]);