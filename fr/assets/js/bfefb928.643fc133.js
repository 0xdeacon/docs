"use strict";(self.webpackChunkcelestia_docs=self.webpackChunkcelestia_docs||[]).push([[6968],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return f}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),i=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=i(e.components);return n.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,s=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=i(r),f=o,m=d["".concat(p,".").concat(f)]||d[f]||c[f]||s;return r?n.createElement(m,a(a({ref:t},u),{},{components:r})):n.createElement(m,a({ref:t},u))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=r.length,a=new Array(s);a[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var i=2;i<s;i++)a[i]=r[i];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},4333:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return a},default:function(){return c},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return i}});var n=r(3117),o=(r(7294),r(3905));const s={sidebar_label:"Types"},a="Types de Wordle",l={unversionedId:"developers/wordle-types",id:"developers/wordle-types",title:"Types de Wordle",description:"Durant les prochaines \xe9tapes, nous allons cr\xe9er des types qui seront utilis\xe9s par les messages que nous avons cr\xe9\xe9s.",source:"@site/i18n/fr/docusaurus-plugin-content-docs/current/developers/wordle-types.md",sourceDirName:"developers",slug:"/developers/wordle-types",permalink:"/fr/developers/wordle-types",draft:!1,editUrl:"https://github.com/celestiaorg/docs/tree/main/docs/developers/wordle-types.md",tags:[],version:"current",frontMatter:{sidebar_label:"Types"},sidebar:"developers",previous:{title:"Messages",permalink:"/fr/developers/wordle-messages"},next:{title:"Keeper",permalink:"/fr/developers/wordle-keeper"}},p={},i=[{value:"Scaffolding Wordle Types",id:"scaffolding-wordle-types",level:2}],u={toc:i};function c(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"types-de-wordle"},"Types de Wordle"),(0,o.kt)("p",null,"Durant les prochaines \xe9tapes, nous allons cr\xe9er des types qui seront utilis\xe9s par les messages que nous avons cr\xe9\xe9s."),(0,o.kt)("h2",{id:"scaffolding-wordle-types"},"Scaffolding Wordle Types"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"ignite scaffold map wordle word submitter --no-message\n")),(0,o.kt)("p",null,"Ce type est une carte appel\xe9e ",(0,o.kt)("inlineCode",{parentName:"p"},"Wordle")," avec deux valeurs appel\xe9es ",(0,o.kt)("inlineCode",{parentName:"p"},"mot")," et ",(0,o.kt)("inlineCode",{parentName:"p"},"d\xe9posant"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"submitter")," est l'adresse de la personne qui a soumis le mot."),(0,o.kt)("p",null,"Le second type est le type ",(0,o.kt)("inlineCode",{parentName:"p"},"Guess"),". Il nous permet de stocker la derni\xe8re estimation pour chaque adresse qui a soumis une solution."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"ignite scaffold map guess word submitter count --no-message\n")),(0,o.kt)("p",null,"Ici, nous allons \xe9galement stocker ",(0,o.kt)("inlineCode",{parentName:"p"},"count")," pour compter combien de devinettes cette adresse a soumis."))}c.isMDXComponent=!0}}]);