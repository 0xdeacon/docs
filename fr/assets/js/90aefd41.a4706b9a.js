"use strict";(self.webpackChunkcelestia_docs=self.webpackChunkcelestia_docs||[]).push([[9954],{3905:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return m}});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=u(a),m=l,g=p["".concat(s,".").concat(m)]||p[m]||c[m]||r;return a?n.createElement(g,o(o({ref:t},d),{},{components:a})):n.createElement(g,o({ref:t},d))}));function m(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,o=new Array(r);o[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:l,o[1]=i;for(var u=2;u<r;u++)o[u]=a[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},5162:function(e,t,a){a.d(t,{Z:function(){return o}});var n=a(7294),l=a(4334),r="tabItem_Ymn6";function o(e){let{children:t,hidden:a,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,l.Z)(r,o),hidden:a},t)}},5488:function(e,t,a){a.d(t,{Z:function(){return m}});var n=a(3117),l=a(7294),r=a(4334),o=a(2389),i=a(7392),s=a(7094),u=a(2466),d="tabList__CuJ",c="tabItem_LNqP";function p(e){var t;const{lazy:a,block:o,defaultValue:p,values:m,groupId:g,className:k}=e,h=l.Children.map(e.children,(e=>{if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),b=m??h.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),v=(0,i.l)(b,((e,t)=>e.value===t.value));if(v.length>0)throw new Error(`Docusaurus error: Duplicate values "${v.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===p?p:p??(null==(t=h.find((e=>e.props.default)))?void 0:t.props.value)??h[0].props.value;if(null!==f&&!b.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${b.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:N}=(0,s.U)(),[w,T]=(0,l.useState)(f),x=[],{blockElementScrollPositionUntilNextRender:I}=(0,u.o5)();if(null!=g){const e=y[g];null!=e&&e!==w&&b.some((t=>t.value===e))&&T(e)}const C=e=>{const t=e.currentTarget,a=x.indexOf(t),n=b[a].value;n!==w&&(I(t),T(n),null!=g&&N(g,String(n)))},Z=e=>{var t;let a=null;switch(e.key){case"Enter":C(e);break;case"ArrowRight":{const t=x.indexOf(e.currentTarget)+1;a=x[t]??x[0];break}case"ArrowLeft":{const t=x.indexOf(e.currentTarget)-1;a=x[t]??x[x.length-1];break}}null==(t=a)||t.focus()};return l.createElement("div",{className:(0,r.Z)("tabs-container",d)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":o},k)},b.map((e=>{let{value:t,label:a,attributes:o}=e;return l.createElement("li",(0,n.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:e=>x.push(e),onKeyDown:Z,onClick:C},o,{className:(0,r.Z)("tabs__item",c,null==o?void 0:o.className,{"tabs__item--active":w===t})}),a??t)}))),a?(0,l.cloneElement)(h.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},h.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==w})))))}function m(e){const t=(0,o.Z)();return l.createElement(p,(0,n.Z)({key:String(t)},e))}},4697:function(e,t,a){a.r(t),a.d(t,{assets:function(){return d},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return c}});var n=a(3117),l=(a(7294),a(3905)),r=a(5488),o=a(5162);const i={sidebar_label:"Light Node"},s="Configuration d'un Light Node Celestia",u={unversionedId:"nodes/light-node",id:"nodes/light-node",title:"Configuration d'un Light Node Celestia",description:"Ce tutoriel vous guidera \xe0 travers la mise en place d'un Light Node Celestia, qui vous permettra d'effectuer des \xe9chantillonnages de disponibilit\xe9 de donn\xe9es sur le r\xe9seau de disponibilit\xe9 de donn\xe9es (Data Availability/DA).",source:"@site/i18n/fr/docusaurus-plugin-content-docs/current/nodes/light-node.mdx",sourceDirName:"nodes",slug:"/nodes/light-node",permalink:"/fr/nodes/light-node",draft:!1,editUrl:"https://github.com/celestiaorg/docs/tree/main/docs/nodes/light-node.mdx",tags:[],version:"current",frontMatter:{sidebar_label:"Light Node"},sidebar:"nodes",previous:{title:"Full Storage Node",permalink:"/fr/nodes/full-storage-node"},next:{title:"Participer aux Testnets de Celestia",permalink:"/fr/nodes/participate"}},d={},c=[{value:"Pr\xe9sentation des Light Nodes",id:"pr\xe9sentation-des-light-nodes",level:2},{value:"Hardware Requis",id:"hardware-requis",level:2},{value:"Configuration de votre Light Node",id:"configuration-de-votre-light-node",level:2},{value:"Configurer les d\xe9pendances",id:"configurer-les-d\xe9pendances",level:3},{value:"\ud83c\udf7a Installer Homebrew",id:"-installer-homebrew",level:4},{value:"\ud83d\uddc4 Install wget and jq",id:"-install-wget-and-jq",level:4},{value:"\ud83c\udf7a Installing Homebrew",id:"-installing-homebrew",level:4},{value:"\ud83d\uddc4 Install wget and jq",id:"-install-wget-and-jq-1",level:4},{value:"Installer Golang",id:"installer-golang",level:3},{value:"Install Celestia node",id:"install-celestia-node",level:3},{value:"Initialize the light node",id:"initialize-the-light-node",level:2},{value:"D\xe9marrer le light node",id:"d\xe9marrer-le-light-node",level:3},{value:"Cl\xe9s et portefeuilles",id:"cl\xe9s-et-portefeuilles",level:3},{value:"Optional: run the light node with a custom key",id:"optional-run-the-light-node-with-a-custom-key",level:3},{value:"Optional: start light node with SystemD",id:"optional-start-light-node-with-systemd",level:3},{value:"Data availability sampling (DAS)",id:"data-availability-sampling-das",level:2}],p={toc:c};function m(e){let{components:t,...i}=e;return(0,l.kt)("wrapper",(0,n.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"configuration-dun-light-node-celestia"},"Configuration d'un Light Node Celestia"),(0,l.kt)("p",null,"Ce tutoriel vous guidera \xe0 travers la mise en place d'un Light Node Celestia, qui vous permettra d'effectuer des \xe9chantillonnages de disponibilit\xe9 de donn\xe9es sur le r\xe9seau de disponibilit\xe9 de donn\xe9es (Data Availability/DA)."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Pour voir un tutoriel vid\xe9o sur la mise en place d'un Light Node Celestia, cliquez ",(0,l.kt)("a",{parentName:"p",href:"/fr/developers/light-node-video"},"ici"))),(0,l.kt)("h2",{id:"pr\xe9sentation-des-light-nodes"},"Pr\xe9sentation des Light Nodes"),(0,l.kt)("p",null,"Les Light nodes s'assurent de la disponibilit\xe9 des donn\xe9es. C'est le moyen le plus commun d'interagir avec le r\xe9seau Celestia."),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"light-node",src:a(8236).Z,width:"1058",height:"245"})),(0,l.kt)("p",null,"Les Light Nodes ont le comportement suivant :"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Ils \xe9coutent les ExtendedHeaders, c'est-\xe0-dire les en-t\xeates \xab bruts\xbb envelopp\xe9s, qui notifient les nodes Celestia des nouveaux en-t\xeates de blocs et des m\xe9tadonn\xe9es de DA pertinentes."),(0,l.kt)("li",{parentName:"ol"},"Ils effectuent l'\xe9chantillonnage de la disponibilit\xe9 des donn\xe9es (DAS) sur les en-t\xeates re\xe7us")),(0,l.kt)("h2",{id:"hardware-requis"},"Hardware Requis"),(0,l.kt)("p",null,"Les exigences mat\xe9rielles minimales suivantes sont recommand\xe9es pour ex\xe9cuter un Light node :"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"M\xe9moire: 2 Go de RAM"),(0,l.kt)("li",{parentName:"ul"},"CPU : Noyau unique"),(0,l.kt)("li",{parentName:"ul"},"Disque: 5 Go de stockage SSD"),(0,l.kt)("li",{parentName:"ul"},"Bande passante : 56 Kbps en download / 56 Kbps en upload")),(0,l.kt)("h2",{id:"configuration-de-votre-light-node"},"Configuration de votre Light Node"),(0,l.kt)("p",null,"Le tutoriel suivant est fait sur une machine d'instance Linux Ubuntu 20.04 (LTS) x64."),(0,l.kt)("h3",{id:"configurer-les-d\xe9pendances"},"Configurer les d\xe9pendances"),(0,l.kt)("p",null,"Premi\xe8rement v\xe9rifiez que votre syst\xe8me d'exploitation est \xe0 jour ou mettez-le \xe0 jour :"),(0,l.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"apt",label:"APT",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"sudo apt update && sudo apt upgrade -y\n"))),(0,l.kt)(o.Z,{value:"yum",label:"YUM",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"sudo yum update\n")))),(0,l.kt)("p",null,"Ce sont des packages essentiels qui sont n\xe9cessaires pour ex\xe9cuter de nombreuses t\xe2ches telles que le t\xe9l\xe9chargement de fichiers, la compilation et la surveillance du node :"),(0,l.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"apt",label:"APT",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"sudo apt install curl tar wget clang pkg-config libssl-dev jq build-essential git make ncdu -y\n"))),(0,l.kt)(o.Z,{value:"yum",label:"YUM",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"sudo yum install curl tar wget clang pkg-config libssl-dev jq build-essential git make ncdu -y\n"))),(0,l.kt)(o.Z,{value:"apple",label:"Mac (Apple)",mdxType:"TabItem"},(0,l.kt)("h4",{id:"-installer-homebrew"},"\ud83c\udf7a Installer Homebrew"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://brew.sh/"},"Homebrew")," est un gestionnaire de packages pour macOS et Linux et\nvous permettra d'installer vos d\xe9pendances."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n')),(0,l.kt)("p",null,"V\xe9rifiez que les commandes en sortie soient similaires \xe0 :"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"==> Next steps:\n- Run these three commands in your terminal to add Homebrew to your PATH:\n    echo '# Set PATH, MANPATH, etc., for Homebrew.' >> /Users/joshstein/.zprofile\n    echo 'eval \"$(/opt/homebrew/bin/brew shellenv)\"' >> /Users/joshstein/.zprofile\n    eval \"$(/opt/homebrew/bin/brew shellenv)\"\n")),(0,l.kt)("h4",{id:"-install-wget-and-jq"},"\ud83d\uddc4 Install wget and jq"),(0,l.kt)("p",null,"Using Homebrew, in your terminal:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"brew install wget && brew install jq\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.gnu.org/software/wget/"},"wget")," is an internet file retriever and\n",(0,l.kt)("a",{parentName:"p",href:"https://stedolan.github.io/jq/"},"jq")," is a lightweight command-line JSON\nprocessor.")),(0,l.kt)(o.Z,{value:"mac",label:"Mac (Intel)",mdxType:"TabItem"},(0,l.kt)("h4",{id:"-installing-homebrew"},"\ud83c\udf7a Installing Homebrew"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://brew.sh/"},"Homebrew")," is a package manager for macOS and Linux and will\nallow you to install your dependencies."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n')),(0,l.kt)("p",null,"Be sure to run the commands in the output that are similar to:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"==> Next steps:\n- Run these three commands in your terminal to add Homebrew to your PATH:\n    echo '# Set PATH, MANPATH, etc., for Homebrew.' >> /Users/joshstein/.zprofile\n    echo 'eval \"$(/opt/homebrew/bin/brew shellenv)\"' >> /Users/joshstein/.zprofile\n    eval \"$(/opt/homebrew/bin/brew shellenv)\"\n")),(0,l.kt)("h4",{id:"-install-wget-and-jq-1"},"\ud83d\uddc4 Install wget and jq"),(0,l.kt)("p",null,"Using Homebrew, in your terminal:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"brew install wget && brew install jq\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.gnu.org/software/wget/"},"wget")," is an internet file retriever and\n",(0,l.kt)("a",{parentName:"p",href:"https://stedolan.github.io/jq/"},"jq")," is a lightweight command-line JSON\nprocessor."))),(0,l.kt)("h3",{id:"installer-golang"},"Installer Golang"),(0,l.kt)("p",null,"L'application Celestia et le n\u0153ud Celestia sont \xe9crits en ",(0,l.kt)("a",{parentName:"p",href:"https://go.dev/"},"Golang")," donc nous devons installer Golang pour les construire et les ex\xe9cuter."),(0,l.kt)(r.Z,{groupId:"network",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"arabica",label:"Arabica",mdxType:"TabItem"},(0,l.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"amd",label:"Ubuntu (AMD)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'ver="1.19.1"\ncd $HOME\nwget "https://golang.org/dl/go$ver.linux-amd64.tar.gz"\nsudo rm -rf /usr/local/go\nsudo tar -C /usr/local -xzf "go$ver.linux-amd64.tar.gz"\nrm "go$ver.linux-amd64.tar.gz"\n'))),(0,l.kt)(o.Z,{value:"arm",label:"Ubuntu (ARM)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'ver="1.19.1"\ncd $HOME\nwget "https://golang.org/dl/go$ver.linux-arm64.tar.gz"\nsudo rm -rf /usr/local/go\nsudo tar -C /usr/local -xzf "go$ver.linux-arm64.tar.gz"\nrm "go$ver.linux-arm64.tar.gz"\n'))),(0,l.kt)(o.Z,{value:"apple",label:"Mac (Apple)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'ver="1.19.1"\ncd $HOME\nwget "https://golang.org/dl/go$ver.darwin-arm64.tar.gz"\nsudo rm -rf /usr/local/go\nsudo tar -C /usr/local -xzf "go$ver.darwin-arm64.tar.gz"\nrm "go$ver.darwin-arm64.tar.gz"\n'))),(0,l.kt)(o.Z,{value:"mac",label:"Mac (Intel)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'ver="1.19.1"\ncd $HOME\nwget "https://golang.org/dl/go$ver.darwin-amd64.tar.gz"\nsudo rm -rf /usr/local/go\nsudo tar -C /usr/local -xzf "go$ver.darwin-amd64.tar.gz"\nrm "go$ver.darwin-amd64.tar.gz"\n')))),(0,l.kt)("p",null,"Now we need to add the ",(0,l.kt)("inlineCode",{parentName:"p"},"/usr/local/go/bin")," directory to ",(0,l.kt)("inlineCode",{parentName:"p"},"$PATH"),":"),(0,l.kt)(r.Z,{groupId:"shell",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"bash",label:"bash",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'echo "export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin" >> $HOME/.bash_profile\nsource $HOME/.bash_profile\n'))),(0,l.kt)(o.Z,{value:"zsh",label:"zsh",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-zsh"},'echo "export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin" >> $HOME/.zshrc\nsource $HOME/.zshrc\n')))),(0,l.kt)("p",null,"To check if Go was installed correctly run:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"go version\n")),(0,l.kt)("p",null,"The output should be the version installed:"),(0,l.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"amd",label:"Ubuntu (AMD)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"go version go1.19.1 linux/amd64\n"))),(0,l.kt)(o.Z,{value:"arm",label:"Ubuntu (ARM)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"go version go1.19.1 linux/arm64\n"))),(0,l.kt)(o.Z,{value:"apple",label:"Mac (Apple)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"go version go1.19.1 darwin/arm64\n"))),(0,l.kt)(o.Z,{value:"mac",label:"Mac (Intel)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"go version go1.19.1 darwin/amd64\n"))))),(0,l.kt)(o.Z,{value:"mamaki",label:"Mamaki",mdxType:"TabItem"},(0,l.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"amd",label:"Ubuntu (AMD)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'ver="1.18.2"\ncd $HOME\nwget "https://golang.org/dl/go$ver.linux-amd64.tar.gz"\nsudo rm -rf /usr/local/go\nsudo tar -C /usr/local -xzf "go$ver.linux-amd64.tar.gz"\nrm "go$ver.linux-amd64.tar.gz"\n'))),(0,l.kt)(o.Z,{value:"arm",label:"Ubuntu (ARM)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'ver="1.18.2"\ncd $HOME\nwget "https://golang.org/dl/go$ver.linux-arm64.tar.gz"\nsudo rm -rf /usr/local/go\nsudo tar -C /usr/local -xzf "go$ver.linux-arm64.tar.gz"\nrm "go$ver.linux-arm64.tar.gz"\n'))),(0,l.kt)(o.Z,{value:"apple",label:"Mac (Apple)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'ver="1.18.2"\ncd $HOME\nwget "https://golang.org/dl/go$ver.darwin-arm64.tar.gz"\nsudo rm -rf /usr/local/go\nsudo tar -C /usr/local -xzf "go$ver.darwin-arm64.tar.gz"\nrm "go$ver.darwin-arm64.tar.gz"\n'))),(0,l.kt)(o.Z,{value:"mac",label:"Mac (Intel)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'ver="1.18.2"\ncd $HOME\nwget "https://golang.org/dl/go$ver.darwin-amd64.tar.gz"\nsudo rm -rf /usr/local/go\nsudo tar -C /usr/local -xzf "go$ver.darwin-amd64.tar.gz"\nrm "go$ver.darwin-amd64.tar.gz"\n')))),(0,l.kt)("p",null,"Now we need to add the ",(0,l.kt)("inlineCode",{parentName:"p"},"/usr/local/go/bin")," directory to ",(0,l.kt)("inlineCode",{parentName:"p"},"$PATH"),":"),(0,l.kt)(r.Z,{groupId:"shell",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"bash",label:"bash",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'echo "export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin" >> $HOME/.bash_profile\nsource $HOME/.bash_profile\n'))),(0,l.kt)(o.Z,{value:"zsh",label:"zsh",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-zsh"},'echo "export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin" >> $HOME/.zshrc\nsource $HOME/.zshrc\n')))),(0,l.kt)("p",null,"To check if Go was installed correctly run:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"go version\n")),(0,l.kt)("p",null,"The output should be the version installed:"),(0,l.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"amd",label:"Ubuntu (AMD)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"go version go1.18.2 linux/amd64\n"))),(0,l.kt)(o.Z,{value:"arm",label:"Ubuntu (ARM)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"go version go1.18.2 linux/arm64\n"))),(0,l.kt)(o.Z,{value:"apple",label:"Mac (Apple)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"go version go1.18.2 darwin/arm64\n"))),(0,l.kt)(o.Z,{value:"mac",label:"Mac (Intel)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"go version go1.18.2 darwin/amd64\n")))))),(0,l.kt)("h3",{id:"install-celestia-node"},"Install Celestia node"),(0,l.kt)(r.Z,{groupId:"network",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"arabica",label:"Arabica",mdxType:"TabItem"},(0,l.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"amd",label:"Ubuntu (AMD)",mdxType:"TabItem"},(0,l.kt)("p",null,"Installing ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia-node")," for Arabica Devnet means installing a specific version\nto be compatible with the network."),(0,l.kt)("p",null,"Install the ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia-node")," binary by running the following commands:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"cd $HOME\nrm -rf celestia-node\ngit clone https://github.com/celestiaorg/celestia-node.git\ncd celestia-node/\ngit checkout tags/v0.5.0-rc5\nmake install\nmake cel-key\n")),(0,l.kt)("p",null,"Verify that the binary is working and check the version with the ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia\nversion")," command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-output"},"celestia version\nSemantic version: v0.5.0-rc5\nCommit: 039facd94104c741f8fa995e80f1321776ae4ad3\nBuild Date: Tue Nov 15 16:23:30 EST 2022\nSystem version: amd64/linux\nGolang version: go1.19.1\n"))),(0,l.kt)(o.Z,{value:"arm",label:"Ubuntu (ARM)",mdxType:"TabItem"},(0,l.kt)("p",null,"Installing ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia-node")," for Arabica Devnet means installing a specific version\nto be compatible with the network."),(0,l.kt)("p",null,"Install the ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia-node")," binary by running the following commands:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"cd $HOME\nrm -rf celestia-node\ngit clone https://github.com/celestiaorg/celestia-node.git\ncd celestia-node/\ngit checkout tags/v0.5.0-rc5\nmake install\nmake cel-key\n")),(0,l.kt)("p",null,"Verify that the binary is working and check the version with the ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia\nversion")," command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-output"},"celestia version\nSemantic version: v0.5.0-rc5\nCommit: 039facd94104c741f8fa995e80f1321776ae4ad3\nBuild Date: Tue Nov 15 16:23:30 EST 2022\nSystem version: arm64/linux\nGolang version: go1.19.1\n"))),(0,l.kt)(o.Z,{value:"apple",label:"Mac (Apple)",mdxType:"TabItem"},(0,l.kt)("p",null,"Installing ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia-node")," for Arabica Devnet means installing a specific version\nto be compatible with the network."),(0,l.kt)("p",null,"Install the ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia-node")," binary by running the following commands:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"cd $HOME\nrm -rf celestia-node\ngit clone https://github.com/celestiaorg/celestia-node.git\ncd celestia-node/\ngit checkout tags/v0.5.0-rc5\nmake go-install\nmake cel-key\n")),(0,l.kt)("p",null,"Verify that the binary is working and check the version with the ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia\nversion")," command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-output"},"celestia version\nSemantic version: v0.5.0-rc5\nCommit: 039facd94104c741f8fa995e80f1321776ae4ad3\nBuild Date: Tue Nov 15 16:23:30 EST 2022\nSystem version: arm64/darwin\nGolang version: go1.19.1\n"))),(0,l.kt)(o.Z,{value:"mac",label:"Mac (Intel)",mdxType:"TabItem"},(0,l.kt)("p",null,"Installing ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia-node")," for Arabica Devnet means installing a specific version\nto be compatible with the network."),(0,l.kt)("p",null,"Install the ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia-node")," binary by running the following commands:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"cd $HOME\nrm -rf celestia-node\ngit clone https://github.com/celestiaorg/celestia-node.git\ncd celestia-node/\ngit checkout tags/v0.5.0-rc5\nmake go-install\nmake cel-key\n")),(0,l.kt)("p",null,"Verify that the binary is working and check the version with the ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia\nversion")," command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-output"},"celestia version\nSemantic version: v0.5.0-rc5\nCommit: 039facd94104c741f8fa995e80f1321776ae4ad3\nBuild Date: Tue Nov 15 16:23:30 EST 2022\nSystem version: amd64/darwin\nGolang version: go1.19.1\n"))))),(0,l.kt)(o.Z,{value:"mamaki",label:"Mamaki",mdxType:"TabItem"},(0,l.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"amd",label:"Ubuntu (AMD)",mdxType:"TabItem"},(0,l.kt)("p",null,"Installing ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia-node")," for Mamaki Testnet means installing a specific version\nto be compatible with the network."),(0,l.kt)("p",null,"Install the ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia-node")," binary by running the following commands:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"cd $HOME\nrm -rf celestia-node\ngit clone https://github.com/celestiaorg/celestia-node.git\ncd celestia-node/\ngit checkout tags/v0.3.0-rc2\nmake install\nmake cel-key\n")),(0,l.kt)("p",null,"Verify that the binary is working and check the version with the ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia\nversion")," command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"$ celestia version\nSemantic version: v0.3.0-rc2\nCommit: 89892d8b96660e334741987d84546c36f0996fbe\n"))),(0,l.kt)(o.Z,{value:"arm",label:"Ubuntu (ARM)",mdxType:"TabItem"},(0,l.kt)("p",null,"Installing ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia-node")," for Mamaki Testnet means installing a specific version\nto be compatible with the network."),(0,l.kt)("p",null,"Install the ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia-node")," binary by running the following commands:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"cd $HOME\nrm -rf celestia-node\ngit clone https://github.com/celestiaorg/celestia-node.git\ncd celestia-node/\ngit checkout tags/v0.3.0-rc2\nmake install\nmake cel-key\n")),(0,l.kt)("p",null,"Verify that the binary is working and check the version with the ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia\nversion")," command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"$ celestia version\nSemantic version: v0.3.0-rc2\nCommit: 89892d8b96660e334741987d84546c36f0996fbe\n"))),(0,l.kt)(o.Z,{value:"apple",label:"Mac (Apple)",mdxType:"TabItem"},(0,l.kt)("p",null,"Installing ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia-node")," for Mamaki Testnet means installing a specific version\nto be compatible with the network."),(0,l.kt)("p",null,"Install the ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia-node")," binary by running the following commands:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"cd $HOME\nrm -rf celestia-node\ngit clone https://github.com/celestiaorg/celestia-node.git\ncd celestia-node/\ngit checkout tags/v0.3.0-rc2\nmake install\nmake cel-key\n")),(0,l.kt)("p",null,"Verify that the binary is working and check the version with the ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia\nversion")," command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"$ celestia version\nSemantic version: v0.3.0-rc2\nCommit: 89892d8b96660e334741987d84546c36f0996fbe\n"))),(0,l.kt)(o.Z,{value:"mac",label:"Mac (Intel)",mdxType:"TabItem"},(0,l.kt)("p",null,"Installing ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia-node")," for Mamaki Testnet means installing a specific version\nto be compatible with the network."),(0,l.kt)("p",null,"Install the ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia-node")," binary by running the following commands:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"cd $HOME\nrm -rf celestia-node\ngit clone https://github.com/celestiaorg/celestia-node.git\ncd celestia-node/\ngit checkout tags/v0.3.0-rc2\nmake install\nmake cel-key\n")),(0,l.kt)("p",null,"Verify that the binary is working and check the version with the ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia\nversion")," command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"$ celestia version\nSemantic version: v0.3.0-rc2\nCommit: 89892d8b96660e334741987d84546c36f0996fbe\n")))))),(0,l.kt)("h2",{id:"initialize-the-light-node"},"Initialize the light node"),(0,l.kt)("p",null,"Run the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light init\n")),(0,l.kt)("p",null,"You should see output like:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-output"},'$ celestia light init\n2022-07-18T02:22:09.449Z INFO node node/init.go:26 Initializing Light Node Store over \'/home/ec2-user/.celestia-light\'\n2022-07-18T02:22:09.449Z INFO node node/init.go:62 Saving config {"path": "/home/ec2-user/.celestia-light/config.toml"}\n2022-07-18T02:22:09.449Z INFO node node/init.go:67 Node Store initialized\n')),(0,l.kt)("h3",{id:"d\xe9marrer-le-light-node"},"D\xe9marrer le light node"),(0,l.kt)("p",null,"Start the light node with a connection to a validator node's gRPC endpoint (which is usually exposed on port 9090):"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"NOTE: In order for access to the ability to get/submit state-related information, such as the ability to submit PayForData transactions, or query for the node's account balance, a gRPC endpoint of a validator (core) node must be passed as directed below. For ",(0,l.kt)("inlineCode",{parentName:"p"},"gateway"),", the default IP Address is ",(0,l.kt)("inlineCode",{parentName:"p"},"localhost")," and the default ",(0,l.kt)("inlineCode",{parentName:"p"},"port")," is ",(0,l.kt)("inlineCode",{parentName:"p"},"26659"),".")),(0,l.kt)(r.Z,{groupId:"network",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"arabica",label:"Arabica",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light start --core.ip <ip-address> --core.grpc.port <port> --gateway --gateway.addr <ip-address> --gateway.port <port>\n")),(0,l.kt)("p",null,"For ports:"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"NOTE: The ",(0,l.kt)("inlineCode",{parentName:"p"},"--core.grpc.port")," defaults to 9090, so if you do not specify\nit in the command line, it will default to that port. Vous pouvez utiliser le drapeau pour sp\xe9cifier un autre port si vous le pr\xe9f\xe9rez."))),(0,l.kt)(o.Z,{value:"mamaki",label:"Mamaki",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light start --core.grpc <ip-address>:<port>\n")),(0,l.kt)("p",null,"For ports:"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"NOTE: The ",(0,l.kt)("inlineCode",{parentName:"p"},"--core.grpc")," port defaults to 9090, so if you do not specify\nit in the command line, it will default to that port. You can add the port\nafter the IP address.")))),(0,l.kt)(r.Z,{groupId:"network",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"arabica",label:"Arabica",mdxType:"TabItem"},(0,l.kt)("p",null,"If you need a list of RPC endpoints to connect to, you can check from the list ",(0,l.kt)("a",{parentName:"p",href:"/fr/nodes/arabica-devnet#rpc-endpoints"},"here")),(0,l.kt)("p",null,"For example, your command might look something like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light start --core.ip https://limani.celestia-devops.dev --core.grpc.port 9090 --gateway --gateway.addr localhost --gateway.port 26659\n"))),(0,l.kt)(o.Z,{value:"mamaki",label:"Mamaki",mdxType:"TabItem"},(0,l.kt)("p",null,"If you need a list of RPC endpoints to connect to, you can check from the list ",(0,l.kt)("a",{parentName:"p",href:"/fr/nodes/mamaki-testnet#rpc-endpoints"},"here")),(0,l.kt)("p",null,"For example, your command might look something like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light start --core.grpc https://rpc-mamaki.pops.one:9090\n")))),(0,l.kt)("h3",{id:"cl\xe9s-et-portefeuilles"},"Cl\xe9s et portefeuilles"),(0,l.kt)("p",null,"You can create your key for your node by running the following command with the ",(0,l.kt)("a",{parentName:"p",href:"/fr/nodes/keys"},(0,l.kt)("inlineCode",{parentName:"a"},"cel-key"))," utility:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"./cel-key add <key_name> --keyring-backend test --node.type light\n")),(0,l.kt)("p",null,"You can start your light node with the key created above by running the following command:"),(0,l.kt)(r.Z,{groupId:"network",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"arabica",label:"Arabica",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light start --keyring.accname <key_name> --core.ip <ip-address> --core.grpc.port <port> --gateway --gateway.addr <ip-address> --gateway.port <port>\n"))),(0,l.kt)(o.Z,{value:"mamaki",label:"Mamaki",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light start --core.grpc <ip-address>:<port> --keyring.accname <key-name>\n")))),(0,l.kt)("p",null,"Lorsque vous lancez le light node, une cl\xe9 de s\xe9curit\xe9 sera g\xe9n\xe9r\xe9e pour vous. Vous aurez besoin d'approvisionner cette adresse avec les tokens de testnet pour payer les transactions de type PayForData."),(0,l.kt)("p",null,"You can find the address by running the following command in the ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia-node")," directory:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"./cel-key list --node.type light --keyring-backend test\n")),(0,l.kt)("p",null,"You have two networks to get testnet tokens from:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/fr/nodes/arabica-devnet#arabica-devnet-faucet"},"Arabica")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/fr/nodes/mamaki-testnet#mamaki-testnet-faucet"},"Mamaki"))),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"NOTE: If you are running a light node for your sovereign rollup, it is highly recommended to request Arabica devnet tokens as Arabica has the latest changes that can be used to test for developing your sovereign rollup. You can still use Mamaki Testnet as well, it is just used for Validator operations.")),(0,l.kt)("p",null,"You can request funds to your wallet address using the following command in Discord:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"$request <Wallet-Address>\n")),(0,l.kt)("p",null,"Where ",(0,l.kt)("inlineCode",{parentName:"p"},"<Wallet-Address>")," is the ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia1******")," address generated when you created the wallet."),(0,l.kt)("h3",{id:"optional-run-the-light-node-with-a-custom-key"},"Optional: run the light node with a custom key"),(0,l.kt)("p",null,"In order to run a light node using a custom key:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"The custom key must exist inside the celestia light node directory at the correct path (default: ",(0,l.kt)("inlineCode",{parentName:"li"},"~/.celestia-light/keys/keyring-test"),")"),(0,l.kt)("li",{parentName:"ol"},"The name of the custom key must be passed upon ",(0,l.kt)("inlineCode",{parentName:"li"},"start"),", like so:")),(0,l.kt)(r.Z,{groupId:"network",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"arabica",label:"Arabica",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light start --core.ip <ip-address> --core.grpc.port <port> --keyring.accname <name_of_custom_key> --gateway --gateway.addr <ip-address> --gateway.port <port>\n"))),(0,l.kt)(o.Z,{value:"mamaki",label:"Mamaki",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light start --core.grpc <ip-address>:<port> --keyring.accname <name_of_custom_key>\n")))),(0,l.kt)("h3",{id:"optional-start-light-node-with-systemd"},"Optional: start light node with SystemD"),(0,l.kt)("p",null,"Follow the tutorial on setting up the light node as a background process with SystemD ",(0,l.kt)("a",{parentName:"p",href:"/fr/nodes/systemd#celestia-light-node"},"here"),"."),(0,l.kt)("h2",{id:"data-availability-sampling-das"},"Data availability sampling (DAS)"),(0,l.kt)("p",null,"With your light node running, you can check out this tutorial on submitting ",(0,l.kt)("inlineCode",{parentName:"p"},"PayForData")," transactions ",(0,l.kt)("a",{parentName:"p",href:"/fr/developers/node-tutorial"},"here"),"."))}m.isMDXComponent=!0},8236:function(e,t,a){t.Z=a.p+"assets/images/LightNodes-6e065ce02c37e36a01707b9b1edd36b3.png"}}]);